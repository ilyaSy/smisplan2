{"version":3,"sources":["SharedComponents/CustomSelect.js","Components/PopupEdit/PopupEdit.js","SharedComponents/exportDocx.js","Components/PopupConfirm/PopupConfirm.js","Components/PopupAddLinkedInfo/PopupAddLinkedInfo.js","Components/TblActionMenu/TblActionMenu.js"],"names":["CustomSelect","props","handleChange","value","Array","isArray","setState","valueErr","setValue","map","a","join","setFocus","refs","refName","focus","filterValues","data","isDisplayed","optionsCounter","maxOptions","RegExp","test","label","options","length","state","defaultValue","isMulti","offsetTop","this","ReactDOM","findDOMNode","selectStyles","input","base","height","fontFamily","marginTop","fontSize","backgroundColor","control","minHeight","border","borderRadius","borderBottom","selectProps","menuIsOpen","borderColor","boxShadow","placeholder","color","option","valueContainer","paddingLeft","marginLeft","indicatorsContainer","padding","clearIndicator","dropdownIndicator","style","isCreatable","allowCreate","ref","selectRef","styles","menuPlacement","bottom","defaultInputValue","onChange","onMenuOpen","noOptionsMessage","isClearable","isSearchable","required","width","filterOption","Component","PopupEdit","setOpenConfirm","openConfirm","setOpen","open","property","metaData","dataTable","isEditable","indexOf","type","task","realId","listName","vocabulary","getData","then","listInfo","d","id","onClose","handleDateTimeChange","handleOk","dataEdited","key","DateW","toDateTimeStr","isDataEdited","propertyInfo","dataEditedValue","parseInt","dataTableName","participants","split","includes","responsible","action","console","log","handleSaveAsNew","week","parseFloat","date","getYearWeekStr","time","confirmMessage","actionNew","confirmSaveAsNew","handleUpload","e","storage","alert","dispatch","status","message","fileUpload","target","files","response","fileUrl","window","location","host","fileName","filesAttached","push","openUrl","url","filterValidKeys","sortValidKeys","b","tableIndex","printPDF","tasksList","_dataRef","React","createRef","bind","match","properties","concat","Object","keys","filter","sort","Dialog","isOpened","aria-labelledby","fullWidth","classes","paper","className","DialogTitle","trigger","Tooltip","title","IconButton","content","current","onAfterPrint","CustomIcon","class","tip","textRows","doc","Document","rows","text","Paragraph","children","TextRun","size","font","addSection","Packer","toBlob","blob","saveAs","err","exportDocx","specificParameters","tableName","tables","selectString","v","tasks","t","textToDoc","DialogContent","index","pKey","inputRef","el","isSelectCreatable","Input","multiline","onKeyDown","stopPropagation","inputProps","maxHeight","overflow","endAdornment","hasFileUploader","InputAdornment","position","display","multiple","htmlFor","component","utils","MomentUtils","format","ampm","minutesStep","margin","TextField","disabled","replace","DialogActions","Button","variant","onClick","startIcon","hasEditMenuSaveAsNew","PopupConfirm","actionName","actionText","dateTimeChange","mode","undefined","_isAMomentObject","PopupAddLinkedInfo","editData","field","fields","emptyDataError","metaTable","realID","prop","initialValue","getDefaultValues","list","propertyKey","memo","useState","opened","setOpened","menuEl","setMenuEl","menuElSub","setMenuElSub","menuList","setMenuList","isPopupConfirmOpened","setIsPopupConfirmOpened","isPopupEditOpened","setIsPopupEditOpened","isPopupLinkedOpened","setIsPopupLinkedOpened","_menuElSub","useRef","hideBasicElement","parentElement","handleClickSub","event","currentTarget","offsetWidth","item","args","handleOpenPopupEdit","handleOpenPopupLinked","handleOpenPopupConfirm","handleClosePopups","Menu","keepMounted","anchorEl","Boolean","Divider","isListOfItems","MenuItem","handleClickItem","ListItemIcon","Typography","noWrap","listItems","listItem"],"mappings":"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","file":"static/js/6.97c55762.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\n\nexport default class CustomSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: this.props.defaultValue ? this.props.defaultValue : this.props.isMulti ? [] : '',\n      valueErr: false,\n      offsetTop: 0,\n    }\n\n    this.maxOptions = this.props.maxOptions ? this.props.maxOptions : 60;\n    this.optionsCounter = 0;\n  }\n\n  handleChange = value => {\n    if (value && value !== '' && value !== 'null' && Array.isArray(value)) {\n      this.setState({ valueErr: false });\n      this.setState({ value: value });\n      if (typeof this.props.setValue === 'function') {\n        this.props.setValue(value.map(a => { return a.value }).join(','));\n      }\n    }\n    else if (value && value !== '' && value !== 'null') {\n      this.setState({ valueErr: false });\n      this.setState({ value: value });\n      if (typeof this.props.setValue === 'function') {\n        this.props.setValue(value.value);\n      }\n    }\n    else {\n      this.setState({ value: value });\n      if (typeof this.props.setValue === 'function') {\n        this.props.setValue('');\n      }\n    }\n  }\n\n  setFocus = () => { this.refs[this.props.refName].focus() }\n\n  filterValues = (data, value) => {\n    let isDisplayed = this.optionsCounter < this.maxOptions ? true : false;\n\n    if (value && value !== '') {\n      let regExp = new RegExp(value, \"i\")\n      if (!regExp.test(data.label)) isDisplayed = false;\n    }\n\n    if (isDisplayed) this.optionsCounter++;\n    if (this.optionsCounter === this.props.options.length || this.optionsCounter === this.maxOptions) {\n      this.optionsCounter = 0;\n    }\n    return isDisplayed;\n  }\n\n  componentDidMount() {\n    this.setState({ offsetTop: ReactDOM.findDOMNode(this).offsetTop });\n  }\n\n  render() {\n    const selectStyles = {\n      input: base => ({\n        ...base,\n        height: \"25px\",\n        fontFamily: \"var(--font-main)\",\n        marginTop: \"-0.75px\",\n        fontSize: \"15px\",\n        backgroundColor: \"transparent\",\n      }),\n      control: (base, state) => ({\n        ...base,\n        minHeight: \"25px\",\n        height: \"fit-content\",\n        fontFamily: \"var(--font-main)\",\n        fontSize: \"15px\",\n        backgroundColor: \"transparent\",\n        border: \"0px\",\n        borderRadius: \"0px\",\n        borderBottom: this.state.valueErr ? \"2px solid\" : state.selectProps.menuIsOpen ? \"2px solid\" : \"1px solid\",\n        borderColor: this.state.valueErr ? \"#f44336 !important\" : state.selectProps.menuIsOpen ? \"#3f51b5 !important\" : \"rgba(0, 0, 0, 0.42) !important\",\n        boxShadow: \"none\",\n        \"&:hover\": {\n          borderBottom: state.selectProps.menuIsOpen ? \"2px solid\" : \"2px solid\",\n          borderColor: this.state.valueErr ? \"#f44336\" : state.selectProps.menuIsOpen ? \"#3f51b5\" : \"black\",\n        },\n      }),\n      placeholder: (base, state) => ({\n        ...base,\n        height: \"25px\",\n        fontFamily: \"var(--font-main)\",\n        fontSize: \"15px\",\n        color: this.state.valueErr ? \"#f44336\" : state.selectProps.menuIsOpen ? \"#3f51b5\" : \"\",\n        backgroundColor: \"transparent\",\n      }),\n      option: base => ({\n        ...base,\n        fontFamily: \"var(--font-main)\",\n        fontSize: \"15px\",\n        marginTop: \"-3px\",\n        color: \"rgba(0, 0, 0, 0.87)\",\n      }),\n      valueContainer: base => ({\n        ...base,\n        minHeight: \"24px\",\n        height: \"fit-content\",\n        marginTop: \"-5px\",\n        paddingLeft: '0px',\n        marginLeft: '-2px',\n      }),\n      indicatorsContainer: base => ({\n        ...base,\n        minHeight: \"25px !important\",\n        padding: \"0px !important\",\n      }),\n      clearIndicator: base => ({\n        ...base,\n        padding: \"0px 5px 0px 5px !important\",\n      }),\n      dropdownIndicator: base => ({\n        ...base,\n        padding: \"0px 5px 0px 5px !important\",\n      }),\n    };\n\n    return (\n      <div style={this.props.style}>\n        {\n          !this.props.isCreatable &&\n          <Select\n            allowCreate={this.props.allowCreate}\n            ref={this.selectRef}\n            options={this.props.options}\n            styles={selectStyles}\n            // menuPlacement={this.state.offsetTop < 250 ? \"bottom\" : \"top\"}\n            menuPlacement={this.props.bottom ? \"bottom\" : this.state.offsetTop < 250 ? \"bottom\" : \"top\"}\n            value={this.state.value}\n            placeholder={this.props.label}\n            defaultValue={this.props.defaultValue}\n            defaultInputValue={this.props.defaultInputValue}\n            onChange={this.handleChange}\n            onMenuOpen={() => { return this.optionsCounter = 0; }}\n            noOptionsMessage={() => { return \"Нет подходящих вариантов\" }}\n            isClearable\n            isSearchable\n            required\n            isMulti={this.props.isMulti ? true : false}\n            style={{ width: \"200px\" }}\n            filterOption={this.filterValues}\n          />\n        }\n        {\n          this.props.isCreatable &&\n          <CreatableSelect\n            allowCreate={this.props.allowCreate}\n            ref={this.selectRef}\n            options={this.props.options}\n            styles={selectStyles}\n            menuPlacement={this.props.bottom ? \"bottom\" : this.state.offsetTop < 250 ? \"bottom\" : \"top\"}\n            value={this.state.value}\n            placeholder={this.props.label}\n            defaultValue={this.props.defaultValue}\n            defaultInputValue={this.props.defaultInputValue}\n            onChange={this.handleChange}\n            onMenuOpen={() => { return this.optionsCounter = 0; }}\n            noOptionsMessage={() => { return \"Нет подходящих вариантов\" }}\n            isClearable\n            isSearchable\n            required\n            isMulti={this.props.isMulti ? true : false}\n            style={{ width: \"200px\" }}\n            filterOption={this.filterValues}\n          />\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport {\n  Dialog,\n  DialogTitle,\n  DialogActions,\n  TextField,\n  DialogContent,\n  Input,\n} from '@material-ui/core';\nimport { Button, IconButton, Tooltip } from '@material-ui/core';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport PrintIcon from '@material-ui/icons/Print';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport ReactToPrint from 'react-to-print';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n  KeyboardTimePicker,\n  KeyboardDateTimePicker,\n} from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport 'moment/locale/ru';\n\nimport { metaData, dataTable } from '../../config/data';\nimport { getData, fileUpload } from '../../utils/api';\nimport storage from '../../storages/commonStorage';\nimport CustomSelect from '../../SharedComponents/CustomSelect';\n// import CustomCreatableSelect from '../../SharedComponents/CustomCreatableSelect';\nimport CustomIcon from '../../SharedComponents/CustomIcon';\nimport exportDocx from '../../SharedComponents/exportDocx';\nimport DateW from '../../utils/date';\nimport './PopupEdit.css';\n\nconst textToDoc = (task, tasksList) => {\n  let rows = ['Планировщик задач', metaData.specificParameters.tableName, ''];\n\n  let properties = [];\n  Object.keys(metaData.dataTable)\n    .filter((key) => {\n      return (\n        key !== 'specificParameters' && key !== 'undefined' && metaData.dataTable[key].isEditable\n      );\n    })\n    .sort((a, b) => {\n      return metaData.dataTable[a].tableIndex >= metaData.dataTable[b].tableIndex ? 1 : -1;\n    })\n    .map((property) => {\n      return properties.push(property);\n    });\n  Object.keys(metaData.dataTable)\n    .filter((key) => {\n      return (\n        key !== 'specificParameters' && key !== 'undefined' && !metaData.dataTable[key].isEditable\n      );\n    })\n    .sort((a, b) => {\n      return metaData.dataTable[a].tableIndex >= metaData.dataTable[b].tableIndex ? 1 : -1;\n    })\n    .map((property) => {\n      return properties.push(property);\n    });\n\n  for (let property of properties) {\n    let propertyInfo = metaData.dataTable[property];\n    let listInfo = metaData.dataTable[property].vocabulary\n      ? metaData[`${metaData.dataTable[property].vocabulary}List`]\n      : metaData[`${property}List`];\n\n    let value = task[property] ? task[property] : '';\n    if (property === 'mainTable' && metaData.tables[`${value}_meta`].specificParameters) {\n      value = metaData.tables[`${value}_meta`].specificParameters.tableName;\n    }\n\n    if (\n      ['select', 'multi-select'].indexOf(metaData.dataTable[property].type) !== -1 &&\n      value !== ''\n    ) {\n      let selectString = value;\n      value = '';\n      for (let v of selectString.split(',')) {\n        value += value === '' ? (listInfo[v]?.value || v) : `,${listInfo[v]?.value || v}`;\n      }\n    }\n\n    rows.push(`${propertyInfo.value}:   ${value}`);\n  }\n\n  if (metaData.dataTableName === 'discussion') {\n    let tasks = tasksList;\n    rows.push('');\n    if (tasks.length > 0) {\n      rows.push('Незакрытые задачи:');\n      tasks.map((t) => {\n        return rows.push(t);\n      });\n    } else {\n      rows.push('Незакрытые задачи: отсутствуют');\n    }\n  }\n\n  return rows;\n};\n\n//Standart dialog: full edit current task (anything loaded as main table)\nexport default class PopupEdit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // open: props.isOpened || false,\n      openConfirm: false,\n      confirmMessage: '',\n      printPDF: false,\n      tasksList: [],\n    };\n    this._dataRef = React.createRef();\n    this.setOpen = this.setOpen.bind(this);\n    if (this.props.id) {\n      this.realId = dataTable\n        .map((task) => task.id)\n        .indexOf(this.props.id);\n      this.task = dataTable[this.realId];\n      for (let property in metaData.dataTable) {\n        if (['datetime', 'date'].indexOf(metaData.dataTable[property].type) !== -1) {\n          this.state[property] =\n            this.task[property] && this.task[property] !== '' ? this.task[property] : null;\n        } else if (['time'].indexOf(metaData.dataTable[property].type) !== -1) {\n          this.state[property] =\n            this.task[property] && this.task[property] !== ''\n              ? `2000-01-01T${this.task[property]}`\n              : null;\n        } else if (['select', 'multi-select'].indexOf(metaData.dataTable[property].type) !== -1) {\n          this.state[property] = this.task[property];\n        }\n\n        let filesAttached = [];\n        if (\n          /\\b(http:.+?)(txt|docx?|xlsx?|pptx?|pdf|png|bmp|img|jpg|jpeg)\\b/im.test(\n            this.task[property]\n          )\n        ) {\n          filesAttached.push(\n            this.task[property].match(\n              /\\b(http:.+?)(txt|doc|docx|ppt|pptx|xls|xlsx|pdf|png|bpm|img|jpg|jpeg)\\b/gi\n            )\n          );\n          this.state[`${property}FilesAttached`] = filesAttached[0];\n        }\n      }\n    }\n  }\n\n  setOpenConfirm = (openConfirm) => {\n    this.setState({ openConfirm });\n  };\n\n  setOpen = (open) => {\n    this.setState({ open });\n\n    if (open) {\n      for (let property in metaData.dataTable) {\n        if (\n          !metaData.dataTable[property].isEditable ||\n          ['select', 'multi-select'].indexOf(metaData.dataTable[property].type) === -1\n        )\n          continue;\n\n        //Reset property values (maybe we want to edit one more time ?)\n        this.task[property] = dataTable[this.realId][property];\n\n        let listName = metaData.dataTable[property].vocabulary\n          ? metaData.dataTable[property].vocabulary\n          : property;\n        if (!metaData[`${listName}List`]) {\n          getData(listName, 'direct').then((data) => {\n            let listInfo = {};\n            data.map((d) => {\n              return (listInfo[d.id] = d);\n            });\n            this.setState({ [`${listName}List`]: listInfo });\n          });\n        }\n      }\n    }\n    else {\n      this.props.onClose();\n    }\n  };\n\n  handleDateTimeChange = (property) => (value) => {\n    this.setState({ [property]: value });\n  };\n\n  handleOk = () => {\n    let realId = dataTable\n      .map((task) => task.id)\n      .indexOf(this.props.id);\n    let task = dataTable[realId];\n    // let task = this.props.task;\n\n    let dataEdited = {};\n    for (let key in metaData.dataTable) {\n      if (key === 'specificParameters' || key === 'undefined') continue;\n\n      if (key === 'mainTable') {\n        dataEdited[key] = task[key];\n        continue;\n      }\n\n      dataEdited[key] = this.state[key] ? this.state[key] : this[key] ? this[key].value : null;\n\n      if (['datetime', 'date', 'time'].indexOf(metaData.dataTable[key].type) !== -1) {\n        // dataEdited[key] = dateTimeChange(metaData.dataTable[key].type, this.state[key]);\n        dataEdited[key] = DateW.toDateTimeStr(metaData.dataTable[key].type, this.state[key]);\n      }\n    }\n\n    //check if something changed and send if fields only if changed;\n    let isDataEdited = false;\n    for (let key in dataEdited) {\n      let propertyInfo = metaData.dataTable[key];\n      let dataEditedValue =\n        propertyInfo.type === 'int' ? parseInt(dataEdited[key]) : dataEdited[key];\n      if (propertyInfo.type !== 'int' && dataEditedValue !== task[key]) {\n        isDataEdited = true;\n        break;\n      }\n    }\n\n    if (metaData.dataTableName === 'discussion') {\n      if (!dataEdited.participants.split(',').includes(dataEdited.responsible)) {\n        dataEdited.participants = dataEdited.responsible + ',' + dataEdited.participants\n      }\n    }\n\n    isDataEdited\n      ? this.props.action(this.props.id, dataEdited)\n      : console.log('Изменений внесено не было');\n    this.setOpen(false);\n  };\n\n  handleSaveAsNew = () => {\n    let realId = dataTable\n      .map((task) => {\n        return task.id;\n      })\n      .indexOf(this.props.id);\n    let task = dataTable[realId];\n\n    let dataEdited = {};\n    for (let key in metaData.dataTable) {\n      if (key === 'specificParameters' || key === 'undefined') continue;\n      dataEdited[key] = this.state[key] ? this.state[key] : this[key] ? this[key].value : null;\n\n      if (key === 'mainTable') {\n        dataEdited[key] = task[key];\n      }\n\n      if (['datetime', 'date', 'time'].indexOf(metaData.dataTable[key].type) !== -1) {\n        // dataEdited[key] = dateTimeChange(metaData.dataTable[key].type, this.state[key]);\n        dataEdited[key] = DateW.toDateTimeStr(metaData.dataTable[key].type, this.state[key]);\n      }\n    }\n\n    if (dataEdited.week) {\n      dataEdited.week = parseFloat(new DateW(dataEdited.date).getYearWeekStr());\n    }\n\n    if (task.date === dataEdited.date && task.time === dataEdited.time) {\n      this.setOpenConfirm(true);\n      this.setState({ confirmMessage: '(дата и время не были изменены!)' });\n    } else {\n      this.props.actionNew(dataEdited);\n      this.setOpen(false);\n    }\n  };\n\n  confirmSaveAsNew = () => {\n    let realId = dataTable\n      .map((task) => {\n        return task.id;\n      })\n      .indexOf(this.props.id);\n    let task = dataTable[realId];\n\n    let dataEdited = {};\n    for (let key in metaData.dataTable) {\n      if (key === 'specificParameters' || key === 'undefined') continue;\n      dataEdited[key] = this.state[key] ? this.state[key] : this[key] ? this[key].value : null;\n\n      if (key === 'mainTable') {\n        dataEdited[key] = task[key];\n      }\n\n      if (['datetime', 'date', 'time'].indexOf(metaData.dataTable[key].type) !== -1) {\n        // dataEdited[key] = dateTimeChange(metaData.dataTable[key].type, this.state[key]);\n        dataEdited[key] = DateW.toDateTimeStr(metaData.dataTable[key].type, this.state[key]);\n      }\n    }\n\n    if (dataEdited.week) {\n      dataEdited.week = parseFloat(new DateW(dataEdited.date).getYearWeekStr());\n    }\n\n    this.props.actionNew(dataEdited);\n    this.setOpen(false);\n  };\n\n  handleUpload = (e, property) => {\n    storage.alert.dispatch({ type: 'SHOW_ALERT', status: 'warn', message: 'Файл загружается...' });\n    fileUpload(e.target.files[0]).then(([response, error]) => {\n      if (!error) {\n        storage.alert.dispatch({\n          type: 'SHOW_ALERT',\n          status: 'success',\n          message: 'Файл загружен успешно, ссылка добавлена',\n        });\n        let fileUrl = 'http://' + window.location.host + '/smisplan-docs/' + response.fileName;\n        this[property].value = this[property].value + '\\n' + fileUrl;\n\n        const filesAttached = [];\n        if (this.state[`${property}FilesAttached`])\n          filesAttached.push(...this.state[`${property}FilesAttached`]);\n        filesAttached.push(fileUrl);\n        this.setState({ [`${property}FilesAttached`]: filesAttached });\n      } else {\n        storage.alert.dispatch({\n          type: 'SHOW_ALERT',\n          status: 'fail',\n          message: 'Ошибка при загрузке',\n        });\n      }\n    });\n  };\n\n  openUrl = (url) => window.open(url, '_blank', '');\n\n  filterValidKeys = (key) => {\n    return key !== 'specificParameters' && key !== 'undefined'\n  }\n\n  sortValidKeys = (a, b) => {\n    return metaData.dataTable[a].tableIndex >= metaData.dataTable[b].tableIndex ? 1 : -1;\n  }\n\n  render() {\n    let properties = [].concat(\n      Object.keys(metaData.dataTable)\n        .filter(this.filterValidKeys)\n        .filter((key) => metaData.dataTable[key].isEditable)\n        .sort(this.sortValidKeys),\n      Object.keys(metaData.dataTable)\n        .filter(this.filterValidKeys)\n        .filter((key) => !metaData.dataTable[key].isEditable)\n        .sort(this.sortValidKeys)\n    );\n\n    return this.task && (\n      <Dialog\n        open={this.props.isOpened}\n        onClose={this.props.onClose}\n        aria-labelledby=\"dialog-title\"\n        fullWidth={true}\n        classes={{ paper: 'dialog-edit' }}\n      >\n        <div className=\"popup-edit__header\">\n          <DialogTitle id=\"dialog-title\">Редактирование</DialogTitle>\n          <div className=\"popup-edit__print-doc\">\n            <ReactToPrint\n              trigger={() => (\n                <Tooltip title=\"Печатать\">\n                  <IconButton className=\"icn\" style={{ padding: '0px' }}>\n                    <PrintIcon fontSize=\"large\" />\n                  </IconButton>\n                </Tooltip>\n              )}\n              content={() => {\n                this.setState({ printPDF: true });\n                return this._dataRef.current;\n              }}\n              onAfterPrint={() => {\n                this.setState({ printPDF: false });\n              }}\n            />\n            {metaData.dataTableName === 'discussion' && (\n              <CustomIcon\n                class=\"icn_save\"\n                tip=\"Сохранить как документ MS Word\"\n                fontSize=\"large\"\n                action={() => exportDocx(textToDoc(this.task, this.state.tasksList), metaData)}\n              />\n            )}\n          </div>\n        </div>\n        <DialogContent ref={this._dataRef}>\n          {properties.map((property, index) => {\n            let propertyInfo = metaData.dataTable[property];\n            let listName = metaData.dataTable[property].vocabulary\n              ? metaData.dataTable[property].vocabulary\n              : property;\n            let listInfo = metaData[`${listName}List`]\n              ? metaData[`${listName}List`]\n              : this.state[`${listName}List`];\n\n            let value = this.task[property];\n            if (property === 'mainTable' && metaData.tables[`${value}_meta`].specificParameters) {\n              value = metaData.tables[`${value}_meta`].specificParameters.tableName;\n            }\n\n            return (\n              <div key={`dialogEdit-${property}-main`}>\n                <div key={`dialogEdit-${property}-subMain`} className=\"popup-edit__row\">\n                  <div\n                    style={{\n                      width: '200px',\n                      fontSize: '14px',\n                      color: !propertyInfo.isEditable ? 'var(--font-color-disabled)' : '',\n                    }}\n                  >\n                    {propertyInfo.value}\n                  </div>\n                  {propertyInfo.isEditable &&\n                    (propertyInfo.type === 'multi-select' || propertyInfo.type === 'select') &&\n                    listInfo && (\n                      <CustomSelect\n                        style={{ width: '100%', minHeight: '30px', marginTop: '5px' }}\n                        options={Object.keys(listInfo)\n                          .sort((a, b) => listInfo[a].value >= listInfo[b].value ? 1 : -1)\n                          .map((pKey) => {\n                            return { value: pKey, label: listInfo[pKey].value }\n                          })}\n                        bottom\n                        ref={property}\n                        inputRef={(el) => (this[property] = el)}\n                        refName={property}\n                        defaultValue={\n                          this.task[property]\n                            ? this.task[property].split(',').map((v) => {\n                              return listInfo[v]\n                                ? { value: v, label: listInfo[v].value }\n                                : { value: v, label: v };\n                            })\n                            : null\n                        }\n                        setValue={(value) => {\n                          return this.setState({ [property]: value });\n                        }}\n                        label={'Выбрать...'}\n                        isMulti={propertyInfo.type === 'multi-select' ? true : false}\n                        isCreatable={propertyInfo.isSelectCreatable}\n                      />\n                    )}\n                  {propertyInfo.isEditable &&\n                    ['string', 'int', 'fulltext'].indexOf(propertyInfo.type) !== -1 && (\n                      <Input\n                        defaultValue={this.task[property]}\n                        fullWidth={true}\n                        multiline={true}\n                        onKeyDown={(e) => {\n                          //  need this to fix bug: home/end/arrow keys did not work\n                          e.stopPropagation();\n                        }}\n                        inputRef={(el) => (this[property] = el)}\n                        inputProps={{\n                          style: {\n                            fontSize: '14px',\n                            fontFamily: 'var(--font-main)',\n                            maxHeight: this.state.printPDF ? '2000px' : '200px',\n                            overflow: 'unset !important',\n                          },\n                        }}\n                        endAdornment={\n                          propertyInfo.hasFileUploader &&\n                          !this.state.printPDF && (\n                            <div className=\"popup-edit__upload-file\">\n                              <InputAdornment position=\"end\">\n                                <input\n                                  id=\"editDialog-fileUploader\"\n                                  //accept=\"image/*\"\n                                  type=\"file\"\n                                  style={{ display: 'none' }}\n                                  multiple\n                                  onChange={(e) => this.handleUpload(e, property)}\n                                />\n                                <label htmlFor=\"editDialog-fileUploader\">\n                                  <Tooltip title=\"Загрузить\">\n                                    <IconButton color=\"default\" component=\"span\">\n                                      <CloudUploadIcon />\n                                    </IconButton>\n                                  </Tooltip>\n                                </label>\n                              </InputAdornment>\n                            </div>\n                          )\n                        }\n                      />\n                    )}\n                  {propertyInfo.isEditable && propertyInfo.type === 'datetime' && (\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDateTimePicker\n                        format=\"YYYY-MM-DD HH:mm\"\n                        ampm={false}\n                        minutesStep={5}\n                        margin=\"normal\"\n                        onChange={this.handleDateTimeChange(property)}\n                        value={this.state[property]}\n                        inputRef={(el) => (this[property] = el)}\n                        fullWidth={true}\n                      />\n                    </MuiPickersUtilsProvider>\n                  )}\n                  {propertyInfo.isEditable && propertyInfo.type === 'date' && (\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDatePicker\n                        format=\"YYYY-MM-DD\"\n                        margin=\"normal\"\n                        onChange={this.handleDateTimeChange(property)}\n                        value={this.state[property]}\n                        inputRef={(el) => (this[property] = el)}\n                        fullWidth={true}\n                      />\n                    </MuiPickersUtilsProvider>\n                  )}\n                  {propertyInfo.isEditable && propertyInfo.type === 'time' && (\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardTimePicker\n                        format=\"HH:mm\"\n                        ampm={false}\n                        minutesStep={5}\n                        margin=\"normal\"\n                        onChange={this.handleDateTimeChange(property)}\n                        value={this.state[property]}\n                        inputRef={(el) => (this[property] = el)}\n                        fullWidth={true}\n                      />\n                    </MuiPickersUtilsProvider>\n                  )}\n                  {!propertyInfo.isEditable && (\n                    <TextField\n                      defaultValue={value}\n                      inputProps={{\n                        style: { fontSize: '14px', fontFamily: 'var(--font-main)' },\n                      }}\n                      inputRef={(el) => (this[property] = el)}\n                      fullWidth={true}\n                      disabled\n                    />\n                  )}\n                </div>\n\n                {this.state[`${property}FilesAttached`] &&\n                  this.state[`${property}FilesAttached`].length > 0 && (\n                    <div className=\"popup-edit__attached-file\">\n                      {this.state[`${property}FilesAttached`].map((fileUrl, index) => {\n                        return (\n                          <CustomIcon\n                            class=\"icn_attachment\"\n                            tip={`Открыть: ${fileUrl.replace(/^.+\\/(.+)$/, '$1')}`}\n                            type=\"material-ui\"\n                            fontSize=\"large\"\n                            action={() => this.openUrl(fileUrl)}\n                            key={`${fileUrl}_${index}`}\n                          />\n                        );\n                      })}\n                    </div>\n                  )}\n              </div>\n            );\n          })}\n        </DialogContent>\n        <DialogActions className=\"popup-edit__actions\">\n          <Button\n            variant=\"outlined\"\n            onClick={this.handleOk}\n            color=\"primary\"\n            className=\"MuiButton-outlinedOk\"\n            startIcon={<CheckIcon />}\n          >\n            Принять изменения\n            </Button>\n          {metaData.specificParameters.hasEditMenuSaveAsNew && (\n            <Button\n              variant=\"outlined\"\n              onClick={this.handleSaveAsNew}\n              color=\"default\"\n              className=\"MuiButton-outlinedDefault\"\n              startIcon={<SaveAltIcon />}\n            >\n              Сохранить как новую\n              </Button>\n          )}\n          <Button\n            variant=\"outlined\"\n            onClick={this.props.onClose}\n            color=\"secondary\"\n            startIcon={<CloseIcon />}\n          >\n            Закрыть\n            </Button>\n\n          <Dialog\n            open={this.state.openConfirm}\n            onClose={() => this.setOpenConfirm(false)}\n            aria-labelledby=\"dialog-title\"\n            fullWidth={true}\n          >\n            <DialogTitle id=\"dialog-title\">\n              Вы подтверждаете сохранение {this.state.confirmMessage} ?\n              </DialogTitle>\n            <DialogActions className=\"popup-edit__actions\">\n              <Button\n                variant=\"outlined\"\n                onClick={this.confirmSaveAsNew}\n                color=\"primary\"\n                className=\"MuiButton-outlinedOk\"\n                startIcon={<CheckIcon />}\n              >\n                Да\n                </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => { this.setOpenConfirm(false); }}\n                color=\"secondary\"\n                startIcon={<CloseIcon />}\n              >\n                Отмена\n                </Button>\n            </DialogActions>\n          </Dialog>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n","import {Document, Packer, Paragraph, TextRun} from 'docx';\r\nimport {saveAs}     from 'file-saver';\r\nimport storage      from '../storages/commonStorage';\r\n\r\nexport default function exportDocx (textRows) {\r\n    storage.alert.dispatch({ type: 'SHOW_ALERT', status: 'warn', message: 'Идёт сохранение документа...'})\r\n\r\n    const doc = new Document();\r\n    let rows = [];\r\n\r\n    try {\r\n        for (let text of textRows) {\r\n            rows.push(\r\n                // Size is 50% of MS Word pts\r\n                new Paragraph({ children: [new TextRun({text: `${text}`, size: \"24\", font: \"Arial\"})] })\r\n            );\r\n        }\r\n\r\n        doc.addSection({ children: rows })\r\n        \r\n        Packer.toBlob(doc).then(blob => {\r\n            saveAs(blob, \"SMISPlan document.docx\");\r\n            storage.alert.dispatch({ type: 'SHOW_ALERT', status: 'success', message: 'Документ успешно сохранён и загружен'})\r\n        });\r\n    }\r\n    catch (err) {\r\n        storage.alert.dispatch({ type: 'SHOW_ALERT', status: 'fail', message: 'Ошибка при создании и/или сохранении'})\r\n        console.log(`Ошибка при сохранении и/или создании документа: ${err}`)\r\n    }\r\n\r\n    return true;\r\n}","import React from 'react';\r\nimport { Dialog, DialogTitle, DialogActions, DialogContent } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport './PopupConfirm.css';\r\n\r\nexport default function PopupConfirm(props) {\r\n  const handleOk = () => {\r\n    props.action(props.id);\r\n    props.onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.isOpened}\r\n      onClose={props.onClose}\r\n      aria-labelledby=\"dialog-title\"\r\n      fullWidth={true}>\r\n      <DialogTitle id=\"dialog-title\">Вы подтверждаете {props.actionName} ?</DialogTitle>\r\n      <DialogContent>\r\n        {\r\n          props.actionText && \r\n          <div className=\"popup-confirm__content\">{props.actionText}</div>\r\n        }\r\n        <span className=\"popup-confirm__content\">Действие невозможно отменить!</span>\r\n      </DialogContent>\r\n      <DialogActions className=\"popup-confirm__actions\">\r\n        <Button variant=\"outlined\" onClick={handleOk} color=\"primary\" className=\"MuiButton-outlinedOk\"\r\n          startIcon={<CheckIcon />}>\r\n          Да\r\n        </Button>\r\n        <Button variant=\"outlined\" onClick={props.onClose} color=\"secondary\"\r\n          startIcon={<CloseIcon />}>\r\n          Отмена\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n","import React from 'react';\n\nimport { Dialog, DialogTitle, DialogActions, TextField, DialogContent } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n  KeyboardTimePicker,\n  KeyboardDateTimePicker\n} from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport 'moment/locale/ru';\n\nimport CustomSelect from '../../SharedComponents/CustomSelect';\nimport { metaData, dataTable } from '../../config/data';\nimport DateW from '../../utils/date';\nimport getDefaultValues from '../../utils/defaultData';\nimport './PopupAddLinkedInfo.css';\n\nconst dateTimeChange = (mode, value) => {\n  let date = undefined;\n  if (typeof value === 'string') {\n    date = value;\n    if (mode === 'time') date = value.split('T')[1];\n  }\n  else if (typeof value === 'object' && value && value._isAMomentObject) {\n    switch (mode) {\n      case 'date':\n        date = value.format(\"YYYY-MM-DD\");\n        break;\n      case 'time':\n        date = value.format(\"HH:mm:00\");\n        break;\n      case 'datetime':\n        date = value.format(\"YYYY-MM-DD HH:mm:00\");\n        break;\n      default:\n        date = undefined\n    }\n  }\n  return date;\n}\n\n// Standart dialog:\nexport default class PopupAddLinkedInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: this.props.isOpened,\n      emptyDataError: false,\n    };\n\n    // get list of not defined fields;\n    let type = this.props.type;\n    let fields = {}\n    let metaTable = metaData.tables[`${type}_meta`];\n    let realID = dataTable.map(task => { return task.id }).indexOf(this.props.id);\n    for (let prop in metaTable.dataTable) {\n      if (prop === 'id' || metaTable.dataTable[prop].defaultValue !== '') continue;\n      fields[prop] = {\n        type: metaTable.dataTable[prop].type,\n        value: metaTable.dataTable[prop].value\n      }\n\n      if (metaTable.dataTable[prop].initialValue) {\n        fields[prop].initialValue = getDefaultValues(realID, prop, metaTable.dataTable, 'initialValue');\n      }\n\n      if (['select', 'multi-select'].indexOf(metaTable.dataTable[prop].type) !== -1) {\n        fields[prop].list = metaTable.dataTable[prop].vocabulary ?\n          metaTable.dataTable[prop].vocabulary : prop;\n      }\n    }\n\n    this.state.fields = fields;\n    for (let field in fields) {\n      if (fields[field].initialValue) {\n        this.state[field] = fields[field].initialValue\n      }\n      else {\n        if (['datetime', 'date', 'time'].indexOf(fields[field].type) !== -1) {\n          this.state[field] = null;\n        }\n        else {\n          this.state[field] = undefined;\n        }\n      }\n    }\n  }\n\n  handleDateTimeChange = property => value => {\n    this.setState({ [property]: value })\n  }\n\n  handleOk = () => {\n    let editData = {};\n    for (let field in this.state.fields) {\n      editData[field] = '';\n    }\n\n    let emptyDataError = 0;\n    let type = this.props.type;\n    let metaTable = metaData.tables[`${type}_meta`];\n    for (let key in editData) {\n      editData[key] = this.state[key] ? this.state[key] : this[key] ? this[key].value : null;\n\n      if (['datetime', 'date', 'time'].indexOf(metaTable.dataTable[key].type) !== -1) {\n        editData[key] = dateTimeChange(metaTable.dataTable[key].type, this.state[key])\n      }\n\n      if (key !== 'week' && (!editData[key] || editData[key] === '')) emptyDataError++\n    }\n\n    if (metaTable.dataTable.week) {\n      editData.week = new DateW(editData.date).getYearWeekStr();\n    }\n\n    if (emptyDataError) {\n      this.setState({ emptyDataError: true });\n    }\n    else {\n      this.setState({ emptyDataError: false });\n      this.props.action(this.props.id, this.props.type, editData);\n      // this.setOpen(false);\n      this.props.onClose();\n    }\n  };\n\n  render() {\n    let editData = this.state.fields;\n    return (\n      <Dialog\n        open={this.props.isOpened}\n        onClose={() => { this.setState({ emptyDataError: false }); this.props.onClose(); }}\n        aria-labelledby=\"dialog-title\"\n        fullWidth={true}\n        style={{ overflow: 'visible' }}\n        classes={{ paper: 'dialog-linked-data' }}>\n        <DialogTitle id=\"dialog-title\">\n          <div className=\"popup-add-linked-info__title\">\n            <div>{this.props.title ? this.props.title : \"Добавление информации\"}</div>\n\n            <Button variant=\"outlined\" onClick={this.props.onClose} color=\"secondary\"\n              startIcon={<CloseIcon />}>\n              Закрыть\n            </Button>\n          </div>\n        </DialogTitle>\n        <DialogContent>\n          {this.state.emptyDataError &&\n            <div className=\"popup-add-linked-info__err-no-data\">Данные должны быть полностью заполнены</div>}\n          {Object.keys(editData)\n            .filter(property => property !== 'week')\n            .sort((a, b) => { return editData[a].value >= editData[b].value ? 1 : -1 })\n            .map(property => {\n              let propertyInfo = editData[property];\n              let listInfo = metaData[`${propertyInfo.list}List`];\n\n              return (\n                <div key={property} className=\"popup-add-linked-info__row\">\n                  <div className=\"popup-add-linked-info__value\">{propertyInfo.value}</div>\n                  {(propertyInfo.type === 'select' || propertyInfo.type === 'multi-select') &&\n                    <CustomSelect\n                      style={{ width: \"100%\", minHeight: '30px', marginTop: '5px' }}\n                      options={Object.keys(listInfo)\n                        .sort((a, b) => { return listInfo[a].value >= listInfo[b].value ? 1 : -1 })\n                        .map(propertyKey => { return { value: propertyKey, label: listInfo[propertyKey].value } })}\n                      defaultValue={editData[property].initialValue ?\n                        editData[property].initialValue.split(\",\").map(v => { return { value: v, label: listInfo[v].value } }) : null}\n                      ref={property} inputRef={el => this[property] = el}\n                      setValue={(value) => { return this.setState({ [property]: value }) }}\n                      label={'Выбрать...'}\n                      isMulti={propertyInfo.type === 'multi-select' ? true : false}\n                    />\n                  }\n                  {['fulltext', 'string', 'id'].indexOf(propertyInfo.type) !== -1 &&\n                    <TextField defaultValue={editData[property].initialValue}\n                      inputRef={el => this[property] = el}\n                      fullWidth={true} multiline={propertyInfo.type === 'fulltext' ? true : false} />}\n                  {propertyInfo.type === 'date' &&\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDatePicker\n                        format=\"YYYY-MM-DD\"\n                        margin=\"normal\"\n                        onChange={this.handleDateTimeChange(property, propertyInfo.type)}\n                        value={this.state[property]}\n                        inputRef={el => this[property] = el}\n                        fullWidth={true} />\n                    </MuiPickersUtilsProvider>}\n                  {propertyInfo.type === 'time' &&\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardTimePicker\n                        format=\"HH:mm\"\n                        margin=\"normal\"\n                        ampm={false}\n                        minutesStep={5}\n                        onChange={this.handleDateTimeChange(property)}\n                        value={this.state[property]}\n                        inputRef={el => this[property] = el}\n                        fullWidth={true} />\n                    </MuiPickersUtilsProvider>}\n                  {propertyInfo.type === 'datetime' &&\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDateTimePicker\n                        format=\"YYYY-MM-DD HH:mm\"\n                        ampm={false}\n                        minutesStep={5}\n                        margin=\"normal\"\n                        onChange={this.handleDateTimeChange(property, propertyInfo.type)}\n                        value={this.state[property]}\n                        inputRef={el => this[property] = el}\n                        fullWidth={true} />\n                    </MuiPickersUtilsProvider>}\n                </div>\n              )\n            }\n            )}\n        </DialogContent>\n        <DialogActions className=\"popup-add-linked-info__actions\">\n          <Button variant=\"outlined\" onClick={this.handleOk} color=\"primary\" className=\"MuiButton-outlinedOk\"\n            startIcon={<CheckIcon />}>\n            Принять\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n}\n","import React from 'react';\nimport { Menu, MenuItem } from '@material-ui/core';\nimport { ListItemIcon, Typography, Divider } from '@material-ui/core';\nimport ArrowLeft from '@material-ui/icons/ArrowLeft';\n\nimport CustomIcon from '../../SharedComponents/CustomIcon';\nimport PopupEdit from '../PopupEdit/PopupEdit';\nimport PopupConfirm from '../PopupConfirm/PopupConfirm';\nimport PopupAddLinkedInfo from '../PopupAddLinkedInfo/PopupAddLinkedInfo';\nimport './TblActionMenu.css';\n\nfunction TblActionMenu(props) {\n  const [opened, setOpened] = React.useState(false);\n  const [menuEl, setMenuEl] = React.useState(null);\n  const [menuElSub, setMenuElSub] = React.useState(null);\n  const [menuList, setMenuList] = React.useState([]);\n  const [isPopupConfirmOpened, setIsPopupConfirmOpened] = React.useState(false);\n  const [isPopupEditOpened, setIsPopupEditOpened] = React.useState(false);\n  const [isPopupLinkedOpened, setIsPopupLinkedOpened] = React.useState({});\n\n  const _menuElSub = React.useRef(null);\n\n  //need for correct work of sub menu\n  const showBasicElement = () => {\n    menuEl.parentElement.style.display = 'flex';\n  };\n  const hideBasicElement = () => {\n    menuEl.parentElement.style.display = '';\n    setOpened(false);\n  };\n\n  const handleClick = (event) => {\n    setIsPopupLinkedOpened({});\n    if (isPopupConfirmOpened) setIsPopupConfirmOpened(false);\n    if (isPopupEditOpened) setIsPopupEditOpened(false);\n\n    setMenuEl(event.currentTarget);\n    setOpened(true);\n    setMenuList(props.list);\n  };\n\n  const handleClickSub = (event) => {\n    showBasicElement();\n    setMenuElSub(event.currentTarget);\n    _menuElSub.current.style.marginLeft =\n      -1 * _menuElSub.current.children[1].offsetWidth + 5 + 'px';\n  };\n\n  const handleClickItem = (item, id) => {\n    setMenuEl(null);\n    switch (item.id) {\n      case 'tasks_edit':\n        handleOpenPopupEdit();\n        break;\n      case 'tasks_delete':\n        handleOpenPopupConfirm();\n        break;\n      case 'discussion':\n        handleOpenPopupLinked(item.id);\n        break;\n      case 'question':\n        handleOpenPopupLinked(item.id);\n        break;\n      default:\n        item.action(id);\n        break;\n    }\n  };\n\n  const action = (item, args) => {\n    setOpened(false);\n    item.action(...args);\n  }\n\n  const handleOpenPopupEdit = () => { setIsPopupEditOpened(true) };\n  const handleOpenPopupLinked = (type) => { setIsPopupLinkedOpened({ [type]: true }) };\n  const handleOpenPopupConfirm = () => { setIsPopupConfirmOpened(true) };\n  const handleClosePopups = (event) => {\n    setIsPopupLinkedOpened({});\n    setIsPopupConfirmOpened(false);\n    setIsPopupEditOpened(false);\n    setMenuEl(null);\n    setOpened(false);\n    if (event) event.stopPropagation();\n  }\n\n  return (\n    <>\n      <CustomIcon class=\"icn_moreH\" tip=\"Меню действий\" action={handleClick} />\n\n      {\n        opened &&\n        <Menu\n          keepMounted\n          anchorEl={menuEl}\n          open={Boolean(menuEl)}\n          onClose={() => {\n            hideBasicElement();\n            setMenuEl(null);\n          }}\n          className=\"tbl-action-menu\"\n        >\n          {menuList.map((item, index) => {\n            return (\n              <div key={`${index}`}>\n                {item.id === 'divider' && <Divider key={`menu-divider-${index}`} />}\n\n                {item.id !== 'divider' && !item.isListOfItems && (\n                  <MenuItem\n                    key={`menu-${item.id}-menuItem`}\n                    onClick={() => { handleClickItem(item, props.id) }\n                    }\n                  >\n                    <ListItemIcon>\n                      {item.id === 'tasks_edit' ? (\n                        <>\n                          <CustomIcon class={`icn_${item.id}`} tip=\"Редактировать\" />\n                          <PopupEdit\n                            isOpened={isPopupEditOpened}\n                            onClose={handleClosePopups}\n                            id={props.id}\n                            action={(...args) => { action(item, args) }}\n                            actionNew={item.actionNew}\n                            task={props.task}\n                          />\n                        </>\n                      ) :\n                        ['discussion', 'question'].indexOf(item.id) !== -1 ? (\n                          <>\n                            <CustomIcon class={`icn_${item.id}`} tip={item.value} type=\"material-ui\" />\n                            <PopupAddLinkedInfo\n                              isOpened={isPopupLinkedOpened[item.id] || false}\n                              onClose={handleClosePopups}\n                              id={props.id}\n                              action={item.action}\n                              type={item.type}\n                            />\n                          </>\n                        ) : item.id === 'tasks_delete' ? (\n                          <>\n                            <CustomIcon class={`icn_${item.id}`} tip={item.actionName} />\n                            <PopupConfirm\n                              isOpened={isPopupConfirmOpened}\n                              onClose={handleClosePopups}\n                              id={props.id}\n                              action={item.action}\n                              actionText={`Тема: ${props.task?.value}`}\n                            />\n                          </>\n                        ) : item.id ? (\n                          <CustomIcon\n                            class={`icn_${item.id}`}\n                            action={item.actionName}\n                            actionName={item.actionName}\n                            actionText={props.task?.value}\n                            tip={item.value} />\n                        ) : null}\n                    </ListItemIcon>\n                    <Typography variant=\"inherit\" noWrap>\n                      {item.value}\n                    </Typography>\n                  </MenuItem>\n                )}\n                {item.id !== 'divider' && item.isListOfItems && (\n                  <MenuItem key={`menu-${item.id}-menuItem`} onClick={handleClickSub}>\n                    <ListItemIcon>\n                      <ArrowLeft fontSize=\"default\" />\n                    </ListItemIcon>\n                    <Typography variant=\"inherit\" noWrap>\n                      {item.value}\n                    </Typography>\n                  </MenuItem>\n                )}\n                {item.id !== 'divider' && item.isListOfItems && (\n                  <Menu\n                    keepMounted\n                    anchorEl={menuElSub}\n                    ref={_menuElSub}\n                    key={`menu${item.id}-menuItem-sub`}\n                    open={Boolean(menuElSub)}\n                    onClose={() => { setMenuElSub(null); }}\n                  >\n                    {Object.keys(item.listItems).map((listItem) => (\n                      <MenuItem\n                        key={`menu${item.id}-menuItem-sub-${listItem}`}\n                        onClick={() => {\n                          hideBasicElement();\n                          setMenuEl(null);\n                          setMenuElSub(null);\n                          item.action(props.id, listItem);\n                        }}\n                      >\n                        {item.listItems[listItem].value}\n                      </MenuItem>\n                    ))}\n                  </Menu>\n                )}\n              </div>\n            );\n          })}\n        </Menu>\n      }\n    </>\n  );\n}\n\nexport default React.memo(TblActionMenu);\n"],"sourceRoot":""}