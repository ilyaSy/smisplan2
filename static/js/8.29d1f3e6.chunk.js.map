{"version":3,"sources":["Components/PopupSimpleOutput/PopupSimpleOutput.js","Components/MainCalendar/MainCalendar.js"],"names":["PopupSimpleOutput","props","Dialog","open","isOpened","onClose","aria-labelledby","fullWidth","DialogTitle","id","title","DialogContent","format","text","split","map","rowData","index","dataTitle","dataValue","key","className","DialogActions","Button","variant","onClick","color","startIcon","MainCalendar","handleClosePopup","setState","popupIsOpened","handleDayClick","day","dates","state","filter","date","dateStr","sort","a","b","time","length","replace","description","join","popupText","popupFormat","undefined","popupTitle","handleEventClick","event","info","start","toLocaleDateString","toLocaleTimeString","fullDate","dateEvent","metaData","developerList","responsible","value","participants","p","getDate","getMonth","getDay","Date","bind","this","unsubscribe","storage","subscribe","dataLoading","getState","STATE","tableName","dataTable","end","backgroundColor","status","result","initialView","test","document","location","pathname","events","eventTimeFormat","hour","minute","plugins","dayGridPlugin","timeGridPlugin","listPlugin","interactionPlugin","dateClick","eventClick","locale","selectable","weekNumberCalculation","weekends","slotMinTime","headerToolbar","left","center","right","buttonText","today","month","week","list","React","Component"],"mappings":"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","file":"static/js/8.29d1f3e6.chunk.js","sourcesContent":["import React from 'react';\nimport { Dialog, DialogTitle, DialogActions, DialogContent } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport './PopupSimpleOutput.css';\n\n// Standart dialog: just modal popup with text\nexport default function PopupSimpleOutput(props) {\n  return (\n    <Dialog\n      open={props.isOpened}\n      onClose={props.onClose}\n      aria-labelledby=\"dialog-title\"\n      fullWidth={true}>\n      <DialogTitle id=\"dialog-title\">{props.title}</DialogTitle>\n      <DialogContent>\n        {props.format && props.format === 'listOfData' &&\n          props.text.split(\"\\n\").map((rowData, index) => {\n            let [dataTitle, dataValue] = rowData.split(\";\");\n            return <div key={`simpleOutputDialog-field-${index}`} className=\"popup-simple-output__content\">\n              <div className=\"popup-simple-output__title\">{dataTitle}:</div>\n              <div className=\"popup-simple-output__info\">{dataValue}</div>\n            </div>\n          })\n        }\n        {!props.format &&\n          <span className=\"popup-simple-output__text\">{props.text}</span>}\n      </DialogContent>\n      <DialogActions className=\"popup-simple-output__actions\">\n        <Button variant=\"outlined\" onClick={props.onClose} color=\"secondary\"\n          startIcon={<CloseIcon />}>\n          Закрыть\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport interactionPlugin from \"@fullcalendar/interaction\";\n\nimport { dataTable, metaData } from '../../config/data';\nimport storage from '../../storages/commonStorage';\nimport PopupSimpleOutput from '../PopupSimpleOutput/PopupSimpleOutput';\n\nexport default class MainCalendar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      dates: this.props.dates,\n\n      popupText: '',\n      popupFormat: undefined,\n      popupTitle: '',\n      popupIsOpened: false,\n    }\n    this.handleClosePopup = this.handleClosePopup.bind(this)\n  }\n\n  handleClosePopup = () => this.setState({ popupIsOpened: false });\n\n  handleDayClick = (day) => {\n    let dates = this.state.dates.filter(date => { return date.date === day.dateStr }).sort((a, b) => { return a.time > b.time ? 1 : -1 });\n\n    let text = dates.length > 0 ?\n      dates.map(date => { return `${date.time.replace(/(\\d+):(\\d+):(\\d+)/, \"$1:$2\")}\\n${date.description}` }).join(\"\\n\\n\") :\n      'Нет назначенных совещаний';\n\n      this.setState({ popupText: text, popupFormat: undefined, popupTitle: `Совещания за день`, popupIsOpened: true });\n  }\n\n  handleEventClick = (event) => {\n    const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\n    const weekDays = ['понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота', 'воскресение'];\n\n    let info = {\n      title: event.event.title,\n      date: event.event.start.toLocaleDateString().replace(/(\\d+).(\\d+).(\\d+)/, \"$3-$2-$1\"),\n      time: event.event.start.toLocaleTimeString(),\n      fullDate: event.event.start,\n    }\n    let dateEvent = this.state.dates.filter(date => { return date.date === info.date && date.time === info.time && date.description === info.title })[0];\n\n    let text = \"\";\n    text += `Тема;${dateEvent.description}`;\n    text += `\\nОтветственный;${metaData.developerList[dateEvent.responsible].value}`;\n    text += `\\nУчастники;${dateEvent.participants.split(\",\").map(p => { return metaData.developerList[p].value }).join(\", \")}`;\n    text += `\\nДата;${info.fullDate.getDate()} ${months[info.fullDate.getMonth()]}, ${weekDays[info.fullDate.getDay() - 1]}`;\n    text += `\\nВремя;${info.time.replace(/(\\d+):(\\d+):(\\d+)/, \"$1:$2\")}`;\n\n    this.setState({ popupText: text, popupFormat: \"listOfData\", popupTitle: `Совещаниe`, popupIsOpened: true });\n  }\n\n  componentDidMount() {\n    this.unsubscribe = storage.state.subscribe(() => {\n      let dataLoading = storage.state.getState().STATE.dataLoading;\n      let tableName = storage.state.getState().STATE.tableName;\n      if (tableName && !dataLoading) {\n        this.setState({ dates: [] });\n      }\n      if (dataLoading && dataLoading === 'data') {\n        this.setState({ dates: dataTable })\n      }\n    })\n  }\n\n  componentWillUnmount() { this.unsubscribe() }\n\n  render() {\n    let dates = this.state.dates.map(date => {\n      return {\n        title: date.description,\n        start: `${date.date}T${date.time}`,\n        end: `${date.date}T${date.time}`,\n        backgroundColor:\n          date.status === \"rejected\" ?\n            \"red\" :\n            date.status === \"done\" || date.status === \"postponed\" ?\n              \"green\" :\n              !date.result ?\n                \"gold\" : \"\",\n      }\n    });\n\n    let initialView = 'dayGridMonth';\n    if (/\\/calendar\\/list/.test(document.location.pathname)) {\n      initialView = 'listWeek';\n    }\n\n    return (\n      <>\n        <FullCalendar\n          events={dates}\n          eventTimeFormat={{ hour: '2-digit', minute: '2-digit' }}\n          plugins={[dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin]}\n          initialView={initialView}\n          dateClick={this.handleDayClick}\n          eventClick={this.handleEventClick}\n          locale='ru'\n          selectable={true}\n          weekNumberCalculation=\"ISO\"\n          weekends={false}\n          slotMinTime=\"08:00:00\"\n          headerToolbar={{\n            left: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',\n            center: 'title',\n            right: 'today prev,next'\n          }}\n          buttonText={{\n            today: 'Сегодня',\n            month: 'Месяц',\n            week: 'Неделя',\n            day: 'День',\n            list: 'Список'\n          }}\n        />\n\n        <PopupSimpleOutput\n          isOpened={this.state.popupIsOpened}\n          text={this.state.popupText}\n          format={this.state.popupFormat}\n          title={this.state.popupTitle}\n          onClose={this.handleClosePopup} />\n      </>\n    )\n  }\n}\n"],"sourceRoot":""}