{"version":3,"sources":["SharedComponents/CustomSelect.js","Components/PopupEdit/PopupEdit.js","SharedComponents/exportDocx.js","Components/PopupConfirm/PopupConfirm.js","Components/PopupAddLinkedInfo/PopupAddLinkedInfo.js","Components/TblActionMenu/TblActionMenu.js"],"names":["CustomSelect","props","handleChange","value","Array","isArray","setState","valueErr","setValue","map","a","join","setFocus","refs","refName","focus","filterValues","data","isDisplayed","optionsCounter","maxOptions","RegExp","test","label","options","length","state","defaultValue","isMulti","offsetTop","this","ReactDOM","findDOMNode","selectStyles","input","base","height","fontFamily","marginTop","fontSize","backgroundColor","control","minHeight","border","borderRadius","borderBottom","selectProps","menuIsOpen","borderColor","boxShadow","placeholder","color","option","valueContainer","paddingLeft","marginLeft","indicatorsContainer","padding","clearIndicator","dropdownIndicator","style","isCreatable","allowCreate","ref","selectRef","styles","menuPlacement","bottom","defaultInputValue","onChange","onMenuOpen","noOptionsMessage","isClearable","isSearchable","required","width","filterOption","Component","getTasks","task","id","idTask","metaData","dataTableName","field","tasksList","getData","filter","t","parseInt","status","sort","b","info","push","PopupEdit","setOpenConfirm","openConfirm","setOpen","open","mainTable","then","property","dataTable","isEditable","indexOf","type","realId","listName","vocabulary","listInfo","d","onClose","handleDateTimeChange","handleOk","dataEdited","key","DateW","toDateTimeStr","isDataEdited","propertyInfo","dataEditedValue","participants","split","includes","responsible","action","console","log","handleSaveAsNew","week","parseFloat","date","getYearWeekStr","time","confirmMessage","actionNew","confirmSaveAsNew","handleUpload","e","storage","alert","dispatch","message","fileUpload","target","files","response","fileUrl","window","location","host","fileName","filesAttached","openUrl","url","filterValidKeys","sortValidKeys","tableIndex","printPDF","_dataRef","React","createRef","bind","match","properties","concat","Object","keys","Dialog","isOpened","aria-labelledby","fullWidth","classes","paper","className","DialogTitle","trigger","Tooltip","title","IconButton","content","current","onAfterPrint","CustomIcon","class","tip","textRows","doc","Document","rows","text","Paragraph","children","TextRun","size","font","addSection","Packer","toBlob","blob","saveAs","err","exportDocx","specificParameters","tableName","tables","selectString","v","tasks","textToDoc","DialogContent","index","pKey","inputRef","el","isSelectCreatable","Input","multiline","onKeyDown","stopPropagation","inputProps","maxHeight","overflow","endAdornment","hasFileUploader","InputAdornment","position","display","multiple","htmlFor","component","utils","MomentUtils","format","ampm","minutesStep","margin","TextField","disabled","replace","DialogActions","Button","variant","onClick","startIcon","hasEditMenuSaveAsNew","PopupConfirm","actionName","actionText","dateTimeChange","mode","undefined","_isAMomentObject","PopupAddLinkedInfo","editData","fields","emptyDataError","metaTable","realID","prop","initialValue","getDefaultValues","list","propertyKey","memo","useState","opened","setOpened","menuEl","setMenuEl","menuElSub","setMenuElSub","menuList","setMenuList","isPopupConfirmOpened","setIsPopupConfirmOpened","isPopupEditOpened","setIsPopupEditOpened","isPopupLinkedOpened","setIsPopupLinkedOpened","_menuElSub","useRef","hideBasicElement","parentElement","handleClickSub","event","currentTarget","offsetWidth","item","args","handleOpenPopupEdit","handleOpenPopupLinked","handleOpenPopupConfirm","handleClosePopups","Menu","keepMounted","anchorEl","Boolean","Divider","isListOfItems","MenuItem","handleClickItem","ListItemIcon","Typography","noWrap","listItems","listItem"],"mappings":"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","file":"static/js/6.a235be97.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\n\nexport default class CustomSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: this.props.defaultValue ? this.props.defaultValue : this.props.isMulti ? [] : '',\n      valueErr: false,\n      offsetTop: 0,\n    }\n\n    this.maxOptions = this.props.maxOptions ? this.props.maxOptions : 60;\n    this.optionsCounter = 0;\n  }\n\n  handleChange = value => {\n    if (value && value !== '' && value !== 'null' && Array.isArray(value)) {\n      this.setState({ valueErr: false });\n      this.setState({ value: value });\n      if (typeof this.props.setValue === 'function') {\n        this.props.setValue(value.map(a => { return a.value }).join(','));\n      }\n    }\n    else if (value && value !== '' && value !== 'null') {\n      this.setState({ valueErr: false });\n      this.setState({ value: value });\n      if (typeof this.props.setValue === 'function') {\n        this.props.setValue(value.value);\n      }\n    }\n    else {\n      this.setState({ value: value });\n      if (typeof this.props.setValue === 'function') {\n        this.props.setValue('');\n      }\n    }\n  }\n\n  setFocus = () => { this.refs[this.props.refName].focus() }\n\n  filterValues = (data, value) => {\n    let isDisplayed = this.optionsCounter < this.maxOptions ? true : false;\n\n    if (value && value !== '') {\n      let regExp = new RegExp(value, \"i\")\n      if (!regExp.test(data.label)) isDisplayed = false;\n    }\n\n    if (isDisplayed) this.optionsCounter++;\n    if (this.optionsCounter === this.props.options.length || this.optionsCounter === this.maxOptions) {\n      this.optionsCounter = 0;\n    }\n    return isDisplayed;\n  }\n\n  componentDidMount() {\n    this.setState({ offsetTop: ReactDOM.findDOMNode(this).offsetTop });\n  }\n\n  render() {\n    const selectStyles = {\n      input: base => ({\n        ...base,\n        height: \"25px\",\n        fontFamily: \"var(--font-main)\",\n        marginTop: \"-0.75px\",\n        fontSize: \"15px\",\n        backgroundColor: \"transparent\",\n      }),\n      control: (base, state) => ({\n        ...base,\n        minHeight: \"25px\",\n        height: \"fit-content\",\n        fontFamily: \"var(--font-main)\",\n        fontSize: \"15px\",\n        backgroundColor: \"transparent\",\n        border: \"0px\",\n        borderRadius: \"0px\",\n        borderBottom: this.state.valueErr ? \"2px solid\" : state.selectProps.menuIsOpen ? \"2px solid\" : \"1px solid\",\n        borderColor: this.state.valueErr ? \"#f44336 !important\" : state.selectProps.menuIsOpen ? \"#3f51b5 !important\" : \"rgba(0, 0, 0, 0.42) !important\",\n        boxShadow: \"none\",\n        \"&:hover\": {\n          borderBottom: state.selectProps.menuIsOpen ? \"2px solid\" : \"2px solid\",\n          borderColor: this.state.valueErr ? \"#f44336\" : state.selectProps.menuIsOpen ? \"#3f51b5\" : \"black\",\n        },\n      }),\n      placeholder: (base, state) => ({\n        ...base,\n        height: \"25px\",\n        fontFamily: \"var(--font-main)\",\n        fontSize: \"15px\",\n        color: this.state.valueErr ? \"#f44336\" : state.selectProps.menuIsOpen ? \"#3f51b5\" : \"\",\n        backgroundColor: \"transparent\",\n      }),\n      option: base => ({\n        ...base,\n        fontFamily: \"var(--font-main)\",\n        fontSize: \"15px\",\n        marginTop: \"-3px\",\n        color: \"rgba(0, 0, 0, 0.87)\",\n      }),\n      valueContainer: base => ({\n        ...base,\n        minHeight: \"24px\",\n        height: \"fit-content\",\n        marginTop: \"-5px\",\n        paddingLeft: '0px',\n        marginLeft: '-2px',\n      }),\n      indicatorsContainer: base => ({\n        ...base,\n        minHeight: \"25px !important\",\n        padding: \"0px !important\",\n      }),\n      clearIndicator: base => ({\n        ...base,\n        padding: \"0px 5px 0px 5px !important\",\n      }),\n      dropdownIndicator: base => ({\n        ...base,\n        padding: \"0px 5px 0px 5px !important\",\n      }),\n    };\n\n    return (\n      <div style={this.props.style}>\n        {\n          !this.props.isCreatable &&\n          <Select\n            allowCreate={this.props.allowCreate}\n            ref={this.selectRef}\n            options={this.props.options}\n            styles={selectStyles}\n            // menuPlacement={this.state.offsetTop < 250 ? \"bottom\" : \"top\"}\n            menuPlacement={this.props.bottom ? \"bottom\" : this.state.offsetTop < 250 ? \"bottom\" : \"top\"}\n            value={this.state.value}\n            placeholder={this.props.label}\n            defaultValue={this.props.defaultValue}\n            defaultInputValue={this.props.defaultInputValue}\n            onChange={this.handleChange}\n            onMenuOpen={() => { return this.optionsCounter = 0; }}\n            noOptionsMessage={() => { return \"Нет подходящих вариантов\" }}\n            isClearable\n            isSearchable\n            required\n            isMulti={this.props.isMulti ? true : false}\n            style={{ width: \"200px\" }}\n            filterOption={this.filterValues}\n          />\n        }\n        {\n          this.props.isCreatable &&\n          <CreatableSelect\n            allowCreate={this.props.allowCreate}\n            ref={this.selectRef}\n            options={this.props.options}\n            styles={selectStyles}\n            menuPlacement={this.props.bottom ? \"bottom\" : this.state.offsetTop < 250 ? \"bottom\" : \"top\"}\n            value={this.state.value}\n            placeholder={this.props.label}\n            defaultValue={this.props.defaultValue}\n            defaultInputValue={this.props.defaultInputValue}\n            onChange={this.handleChange}\n            onMenuOpen={() => { return this.optionsCounter = 0; }}\n            noOptionsMessage={() => { return \"Нет подходящих вариантов\" }}\n            isClearable\n            isSearchable\n            required\n            isMulti={this.props.isMulti ? true : false}\n            style={{ width: \"200px\" }}\n            filterOption={this.filterValues}\n          />\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport {\n  Dialog,\n  DialogTitle,\n  DialogActions,\n  TextField,\n  DialogContent,\n  Input,\n} from '@material-ui/core';\nimport { Button, IconButton, Tooltip } from '@material-ui/core';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport PrintIcon from '@material-ui/icons/Print';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport ReactToPrint from 'react-to-print';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n  KeyboardTimePicker,\n  KeyboardDateTimePicker,\n} from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport 'moment/locale/ru';\n\nimport { metaData, dataTable } from '../../config/data';\nimport { getData, fileUpload } from '../../utils/api';\nimport storage from '../../storages/commonStorage';\nimport CustomSelect from '../../SharedComponents/CustomSelect';\n// import CustomCreatableSelect from '../../SharedComponents/CustomCreatableSelect';\nimport CustomIcon from '../../SharedComponents/CustomIcon';\nimport exportDocx from '../../SharedComponents/exportDocx';\nimport DateW from '../../utils/date';\nimport './PopupEdit.css';\n\nconst textToDoc = (task, tasksList) => {\n  let rows = ['Планировщик задач', metaData.specificParameters.tableName, ''];\n\n  let properties = [];\n  Object.keys(metaData.dataTable)\n    .filter((key) => {\n      return (\n        key !== 'specificParameters' && key !== 'undefined' && metaData.dataTable[key].isEditable\n      );\n    })\n    .sort((a, b) => {\n      return metaData.dataTable[a].tableIndex >= metaData.dataTable[b].tableIndex ? 1 : -1;\n    })\n    .map((property) => {\n      return properties.push(property);\n    });\n  Object.keys(metaData.dataTable)\n    .filter((key) => {\n      return (\n        key !== 'specificParameters' && key !== 'undefined' && !metaData.dataTable[key].isEditable\n      );\n    })\n    .sort((a, b) => {\n      return metaData.dataTable[a].tableIndex >= metaData.dataTable[b].tableIndex ? 1 : -1;\n    })\n    .map((property) => {\n      return properties.push(property);\n    });\n\n  for (let property of properties) {\n    let propertyInfo = metaData.dataTable[property];\n    let listInfo = metaData.dataTable[property].vocabulary\n      ? metaData[`${metaData.dataTable[property].vocabulary}List`]\n      : metaData[`${property}List`];\n\n    let value = task[property] ? task[property] : '';\n    if (property === 'mainTable' && metaData.tables[`${value}_meta`].specificParameters) {\n      value = metaData.tables[`${value}_meta`].specificParameters.tableName;\n    }\n\n    if (\n      ['select', 'multi-select'].indexOf(metaData.dataTable[property].type) !== -1 &&\n      value !== ''\n    ) {\n      let selectString = value;\n      value = '';\n      for (let v of selectString.split(',')) {\n        value += value === '' ? (listInfo[v]?.value || v) : `,${listInfo[v]?.value || v}`;\n      }\n    }\n\n    rows.push(`${propertyInfo.value}:   ${value}`);\n  }\n\n  if (metaData.dataTableName === 'discussion') {\n    let tasks = tasksList;\n    rows.push('');\n    if (tasks.length > 0) {\n      rows.push('Незакрытые задачи:');\n      tasks.map((t) => {\n        return rows.push(t);\n      });\n    } else {\n      rows.push('Незакрытые задачи: отсутствуют');\n    }\n  }\n\n  return rows;\n};\n\nconst getTasks = async (task) => {\n  let dataListName = 'task';\n  let id = task.idTask;\n  if (metaData.dataTableName === 'taskgroup') id = task.id;\n  let field = 'taskgroup';\n\n  let tasksList = [];\n\n  let data = await getData(dataListName, 'direct', { [field]: id });\n  data\n    .filter((t) => {\n      return parseInt(t[field]) === parseInt(id) && t.status !== 'done';\n    })\n    .sort((a, b) => {\n      return a.value <= b.value ? -1 : 1;\n    })\n    .map((info) => {\n      return tasksList.push(info.value);\n    });\n\n  return tasksList;\n};\n\n//Standart dialog: full edit current task / taskgroup (anything loaded as main table)\nexport default class PopupEdit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // open: props.isOpened || false,\n      openConfirm: false,\n      confirmMessage: '',\n      printPDF: false,\n      tasksList: [],\n    };\n    this._dataRef = React.createRef();\n    this.setOpen = this.setOpen.bind(this);\n    if (this.props.id) {\n      this.realId = dataTable\n        .map((task) => task.id)\n        .indexOf(this.props.id);\n      this.task = dataTable[this.realId];\n      for (let property in metaData.dataTable) {\n        if (['datetime', 'date'].indexOf(metaData.dataTable[property].type) !== -1) {\n          this.state[property] =\n            this.task[property] && this.task[property] !== '' ? this.task[property] : null;\n        } else if (['time'].indexOf(metaData.dataTable[property].type) !== -1) {\n          this.state[property] =\n            this.task[property] && this.task[property] !== ''\n              ? `2000-01-01T${this.task[property]}`\n              : null;\n        } else if (['select', 'multi-select'].indexOf(metaData.dataTable[property].type) !== -1) {\n          this.state[property] = this.task[property];\n        }\n\n        let filesAttached = [];\n        if (\n          /\\b(http:.+?)(txt|docx?|xlsx?|pptx?|pdf|png|bmp|img|jpg|jpeg)\\b/im.test(\n            this.task[property]\n          )\n        ) {\n          filesAttached.push(\n            this.task[property].match(\n              /\\b(http:.+?)(txt|doc|docx|ppt|pptx|xls|xlsx|pdf|png|bpm|img|jpg|jpeg)\\b/gi\n            )\n          );\n          this.state[`${property}FilesAttached`] = filesAttached[0];\n        }\n      }\n    }\n  }\n\n  setOpenConfirm = (openConfirm) => {\n    this.setState({ openConfirm });\n  };\n\n  setOpen = (open) => {\n    this.setState({ open });\n\n    if (open) {\n      if (\n        metaData.dataTableName === 'taskgroup' ||\n        (metaData.dataTableName === 'discussion' && this.task.mainTable === 'taskgroup')\n      ) {\n        getTasks(this.task).then((data) => {\n          this.setState({ tasksList: data });\n        });\n      }\n\n      for (let property in metaData.dataTable) {\n        if (\n          !metaData.dataTable[property].isEditable ||\n          ['select', 'multi-select'].indexOf(metaData.dataTable[property].type) === -1\n        )\n          continue;\n\n        //Reset property values (maybe we want to edit one more time ?)\n        this.task[property] = dataTable[this.realId][property];\n\n        let listName = metaData.dataTable[property].vocabulary\n          ? metaData.dataTable[property].vocabulary\n          : property;\n        if (!metaData[`${listName}List`]) {\n          getData(listName, 'direct').then((data) => {\n            let listInfo = {};\n            data.map((d) => {\n              return (listInfo[d.id] = d);\n            });\n            this.setState({ [`${listName}List`]: listInfo });\n          });\n        }\n      }\n    }\n    else {\n      this.props.onClose();\n    }\n  };\n\n  handleDateTimeChange = (property) => (value) => {\n    this.setState({ [property]: value });\n  };\n\n  handleOk = () => {\n    let realId = dataTable\n      .map((task) => task.id)\n      .indexOf(this.props.id);\n    let task = dataTable[realId];\n    // let task = this.props.task;\n\n    let dataEdited = {};\n    for (let key in metaData.dataTable) {\n      if (key === 'specificParameters' || key === 'undefined') continue;\n\n      if (key === 'mainTable') {\n        dataEdited[key] = task[key];\n        continue;\n      }\n\n      dataEdited[key] = this.state[key] ? this.state[key] : this[key] ? this[key].value : null;\n\n      if (['datetime', 'date', 'time'].indexOf(metaData.dataTable[key].type) !== -1) {\n        // dataEdited[key] = dateTimeChange(metaData.dataTable[key].type, this.state[key]);\n        dataEdited[key] = DateW.toDateTimeStr(metaData.dataTable[key].type, this.state[key]);\n      }\n    }\n\n    //check if something changed and send if fields only if changed;\n    let isDataEdited = false;\n    for (let key in dataEdited) {\n      let propertyInfo = metaData.dataTable[key];\n      let dataEditedValue =\n        propertyInfo.type === 'int' ? parseInt(dataEdited[key]) : dataEdited[key];\n      if (propertyInfo.type !== 'int' && dataEditedValue !== task[key]) {\n        isDataEdited = true;\n        break;\n      }\n    }\n\n    if (metaData.dataTableName === 'discussion') {\n      if (!dataEdited.participants.split(',').includes(dataEdited.responsible)) {\n        dataEdited.participants = dataEdited.responsible + ',' + dataEdited.participants\n      }\n    }\n\n    isDataEdited\n      ? this.props.action(this.props.id, dataEdited)\n      : console.log('Изменений внесено не было');\n    this.setOpen(false);\n  };\n\n  handleSaveAsNew = () => {\n    let realId = dataTable\n      .map((task) => {\n        return task.id;\n      })\n      .indexOf(this.props.id);\n    let task = dataTable[realId];\n\n    let dataEdited = {};\n    for (let key in metaData.dataTable) {\n      if (key === 'specificParameters' || key === 'undefined') continue;\n      dataEdited[key] = this.state[key] ? this.state[key] : this[key] ? this[key].value : null;\n\n      if (key === 'mainTable') {\n        dataEdited[key] = task[key];\n      }\n\n      if (['datetime', 'date', 'time'].indexOf(metaData.dataTable[key].type) !== -1) {\n        // dataEdited[key] = dateTimeChange(metaData.dataTable[key].type, this.state[key]);\n        dataEdited[key] = DateW.toDateTimeStr(metaData.dataTable[key].type, this.state[key]);\n      }\n    }\n\n    if (dataEdited.week) {\n      dataEdited.week = parseFloat(new DateW(dataEdited.date).getYearWeekStr());\n    }\n\n    if (task.date === dataEdited.date && task.time === dataEdited.time) {\n      this.setOpenConfirm(true);\n      this.setState({ confirmMessage: '(дата и время не были изменены!)' });\n    } else {\n      this.props.actionNew(dataEdited);\n      this.setOpen(false);\n    }\n  };\n\n  confirmSaveAsNew = () => {\n    let realId = dataTable\n      .map((task) => {\n        return task.id;\n      })\n      .indexOf(this.props.id);\n    let task = dataTable[realId];\n\n    let dataEdited = {};\n    for (let key in metaData.dataTable) {\n      if (key === 'specificParameters' || key === 'undefined') continue;\n      dataEdited[key] = this.state[key] ? this.state[key] : this[key] ? this[key].value : null;\n\n      if (key === 'mainTable') {\n        dataEdited[key] = task[key];\n      }\n\n      if (['datetime', 'date', 'time'].indexOf(metaData.dataTable[key].type) !== -1) {\n        // dataEdited[key] = dateTimeChange(metaData.dataTable[key].type, this.state[key]);\n        dataEdited[key] = DateW.toDateTimeStr(metaData.dataTable[key].type, this.state[key]);\n      }\n    }\n\n    if (dataEdited.week) {\n      dataEdited.week = parseFloat(new DateW(dataEdited.date).getYearWeekStr());\n    }\n\n    this.props.actionNew(dataEdited);\n    this.setOpen(false);\n  };\n\n  handleUpload = (e, property) => {\n    storage.alert.dispatch({ type: 'SHOW_ALERT', status: 'warn', message: 'Файл загружается...' });\n    fileUpload(e.target.files[0]).then(([response, error]) => {\n      if (!error) {\n        storage.alert.dispatch({\n          type: 'SHOW_ALERT',\n          status: 'success',\n          message: 'Файл загружен успешно, ссылка добавлена',\n        });\n        let fileUrl = 'http://' + window.location.host + '/smisplan-docs/' + response.fileName;\n        this[property].value = this[property].value + '\\n' + fileUrl;\n\n        const filesAttached = [];\n        if (this.state[`${property}FilesAttached`])\n          filesAttached.push(...this.state[`${property}FilesAttached`]);\n        filesAttached.push(fileUrl);\n        this.setState({ [`${property}FilesAttached`]: filesAttached });\n      } else {\n        storage.alert.dispatch({\n          type: 'SHOW_ALERT',\n          status: 'fail',\n          message: 'Ошибка при загрузке',\n        });\n      }\n    });\n  };\n\n  openUrl = (url) => window.open(url, '_blank', '');\n\n  filterValidKeys = (key) => {\n    return key !== 'specificParameters' && key !== 'undefined'\n  }\n\n  sortValidKeys = (a, b) => {\n    return metaData.dataTable[a].tableIndex >= metaData.dataTable[b].tableIndex ? 1 : -1;\n  }\n\n  render() {\n    let properties = [].concat(\n      Object.keys(metaData.dataTable)\n        .filter(this.filterValidKeys)\n        .filter((key) => metaData.dataTable[key].isEditable)\n        .sort(this.sortValidKeys),\n      Object.keys(metaData.dataTable)\n        .filter(this.filterValidKeys)\n        .filter((key) => !metaData.dataTable[key].isEditable)\n        .sort(this.sortValidKeys)\n    );\n\n    return this.task && (\n      <Dialog\n        open={this.props.isOpened}\n        onClose={this.props.onClose}\n        aria-labelledby=\"dialog-title\"\n        fullWidth={true}\n        classes={{ paper: 'dialog-edit' }}\n      >\n        <div className=\"popup-edit__header\">\n          <DialogTitle id=\"dialog-title\">Редактирование</DialogTitle>\n          <div className=\"popup-edit__print-doc\">\n            <ReactToPrint\n              trigger={() => (\n                <Tooltip title=\"Печатать\">\n                  <IconButton className=\"icn\" style={{ padding: '0px' }}>\n                    <PrintIcon fontSize=\"large\" />\n                  </IconButton>\n                </Tooltip>\n              )}\n              content={() => {\n                this.setState({ printPDF: true });\n                return this._dataRef.current;\n              }}\n              onAfterPrint={() => {\n                this.setState({ printPDF: false });\n              }}\n            />\n            {metaData.dataTableName === 'discussion' && (\n              <CustomIcon\n                class=\"icn_save\"\n                tip=\"Сохранить как документ MS Word\"\n                fontSize=\"large\"\n                action={() => exportDocx(textToDoc(this.task, this.state.tasksList), metaData)}\n              />\n            )}\n          </div>\n        </div>\n        <DialogContent ref={this._dataRef}>\n          {properties.map((property, index) => {\n            let propertyInfo = metaData.dataTable[property];\n            let listName = metaData.dataTable[property].vocabulary\n              ? metaData.dataTable[property].vocabulary\n              : property;\n            let listInfo = metaData[`${listName}List`]\n              ? metaData[`${listName}List`]\n              : this.state[`${listName}List`];\n\n            let value = this.task[property];\n            if (property === 'mainTable' && metaData.tables[`${value}_meta`].specificParameters) {\n              value = metaData.tables[`${value}_meta`].specificParameters.tableName;\n            }\n\n            return (\n              <div key={`dialogEdit-${property}-main`}>\n                <div key={`dialogEdit-${property}-subMain`} className=\"popup-edit__row\">\n                  <div\n                    style={{\n                      width: '200px',\n                      fontSize: '14px',\n                      color: !propertyInfo.isEditable ? 'var(--font-color-disabled)' : '',\n                    }}\n                  >\n                    {propertyInfo.value}\n                  </div>\n                  {propertyInfo.isEditable &&\n                    (propertyInfo.type === 'multi-select' || propertyInfo.type === 'select') &&\n                    listInfo && (\n                      <CustomSelect\n                        style={{ width: '100%', minHeight: '30px', marginTop: '5px' }}\n                        options={Object.keys(listInfo)\n                          .sort((a, b) => listInfo[a].value >= listInfo[b].value ? 1 : -1)\n                          .map((pKey) => {\n                            return { value: pKey, label: listInfo[pKey].value }\n                          })}\n                        bottom\n                        ref={property}\n                        inputRef={(el) => (this[property] = el)}\n                        refName={property}\n                        defaultValue={\n                          this.task[property]\n                            ? this.task[property].split(',').map((v) => {\n                              return listInfo[v]\n                                ? { value: v, label: listInfo[v].value }\n                                : { value: v, label: v };\n                            })\n                            : null\n                        }\n                        setValue={(value) => {\n                          return this.setState({ [property]: value });\n                        }}\n                        label={'Выбрать...'}\n                        isMulti={propertyInfo.type === 'multi-select' ? true : false}\n                        isCreatable={propertyInfo.isSelectCreatable}\n                      />\n                    )}\n                  {propertyInfo.isEditable &&\n                    ['string', 'int', 'fulltext'].indexOf(propertyInfo.type) !== -1 && (\n                      <Input\n                        defaultValue={this.task[property]}\n                        fullWidth={true}\n                        multiline={true}\n                        onKeyDown={(e) => {\n                          //  need this to fix bug: home/end/arrow keys did not work\n                          e.stopPropagation();\n                        }}\n                        inputRef={(el) => (this[property] = el)}\n                        inputProps={{\n                          style: {\n                            fontSize: '14px',\n                            fontFamily: 'var(--font-main)',\n                            maxHeight: this.state.printPDF ? '2000px' : '200px',\n                            overflow: 'unset !important',\n                          },\n                        }}\n                        endAdornment={\n                          propertyInfo.hasFileUploader &&\n                          !this.state.printPDF && (\n                            <div className=\"popup-edit__upload-file\">\n                              <InputAdornment position=\"end\">\n                                <input\n                                  id=\"editDialog-fileUploader\"\n                                  //accept=\"image/*\"\n                                  type=\"file\"\n                                  style={{ display: 'none' }}\n                                  multiple\n                                  onChange={(e) => this.handleUpload(e, property)}\n                                />\n                                <label htmlFor=\"editDialog-fileUploader\">\n                                  <Tooltip title=\"Загрузить\">\n                                    <IconButton color=\"default\" component=\"span\">\n                                      <CloudUploadIcon />\n                                    </IconButton>\n                                  </Tooltip>\n                                </label>\n                              </InputAdornment>\n                            </div>\n                          )\n                        }\n                      />\n                    )}\n                  {propertyInfo.isEditable && propertyInfo.type === 'datetime' && (\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDateTimePicker\n                        format=\"YYYY-MM-DD HH:mm\"\n                        ampm={false}\n                        minutesStep={5}\n                        margin=\"normal\"\n                        onChange={this.handleDateTimeChange(property)}\n                        value={this.state[property]}\n                        inputRef={(el) => (this[property] = el)}\n                        fullWidth={true}\n                      />\n                    </MuiPickersUtilsProvider>\n                  )}\n                  {propertyInfo.isEditable && propertyInfo.type === 'date' && (\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDatePicker\n                        format=\"YYYY-MM-DD\"\n                        margin=\"normal\"\n                        onChange={this.handleDateTimeChange(property)}\n                        value={this.state[property]}\n                        inputRef={(el) => (this[property] = el)}\n                        fullWidth={true}\n                      />\n                    </MuiPickersUtilsProvider>\n                  )}\n                  {propertyInfo.isEditable && propertyInfo.type === 'time' && (\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardTimePicker\n                        format=\"HH:mm\"\n                        ampm={false}\n                        minutesStep={5}\n                        margin=\"normal\"\n                        onChange={this.handleDateTimeChange(property)}\n                        value={this.state[property]}\n                        inputRef={(el) => (this[property] = el)}\n                        fullWidth={true}\n                      />\n                    </MuiPickersUtilsProvider>\n                  )}\n                  {!propertyInfo.isEditable && (\n                    <TextField\n                      defaultValue={value}\n                      inputProps={{\n                        style: { fontSize: '14px', fontFamily: 'var(--font-main)' },\n                      }}\n                      inputRef={(el) => (this[property] = el)}\n                      fullWidth={true}\n                      disabled\n                    />\n                  )}\n                </div>\n\n                {this.state[`${property}FilesAttached`] &&\n                  this.state[`${property}FilesAttached`].length > 0 && (\n                    <div className=\"popup-edit__attached-file\">\n                      {this.state[`${property}FilesAttached`].map((fileUrl, index) => {\n                        return (\n                          <CustomIcon\n                            class=\"icn_attachment\"\n                            tip={`Открыть: ${fileUrl.replace(/^.+\\/(.+)$/, '$1')}`}\n                            type=\"material-ui\"\n                            fontSize=\"large\"\n                            action={() => this.openUrl(fileUrl)}\n                            key={`${fileUrl}_${index}`}\n                          />\n                        );\n                      })}\n                    </div>\n                  )}\n              </div>\n            );\n          })}\n          {this.state.printPDF &&\n            (metaData.dataTableName === 'taskgroup' ||\n              (metaData.dataTableName === 'discussion' &&\n                this.task.mainTable === 'taskgroup')) && (\n              <div className=\"popup-edit__open-tasks\">\n                <div>Незакрытые задачи:</div>\n                {this.state.tasksList.map((text, index) => {\n                  return <div key={`pdf-task-${index}`}>{text}</div>;\n                })}\n              </div>\n            )}\n        </DialogContent>\n        <DialogActions className=\"popup-edit__actions\">\n          <Button\n            variant=\"outlined\"\n            onClick={this.handleOk}\n            color=\"primary\"\n            className=\"MuiButton-outlinedOk\"\n            startIcon={<CheckIcon />}\n          >\n            Принять изменения\n            </Button>\n          {metaData.specificParameters.hasEditMenuSaveAsNew && (\n            <Button\n              variant=\"outlined\"\n              onClick={this.handleSaveAsNew}\n              color=\"default\"\n              className=\"MuiButton-outlinedDefault\"\n              startIcon={<SaveAltIcon />}\n            >\n              Сохранить как новую\n              </Button>\n          )}\n          <Button\n            variant=\"outlined\"\n            onClick={this.props.onClose}\n            color=\"secondary\"\n            startIcon={<CloseIcon />}\n          >\n            Закрыть\n            </Button>\n\n          <Dialog\n            open={this.state.openConfirm}\n            onClose={() => this.setOpenConfirm(false)}\n            aria-labelledby=\"dialog-title\"\n            fullWidth={true}\n          >\n            <DialogTitle id=\"dialog-title\">\n              Вы подтверждаете сохранение {this.state.confirmMessage} ?\n              </DialogTitle>\n            <DialogActions className=\"popup-edit__actions\">\n              <Button\n                variant=\"outlined\"\n                onClick={this.confirmSaveAsNew}\n                color=\"primary\"\n                className=\"MuiButton-outlinedOk\"\n                startIcon={<CheckIcon />}\n              >\n                Да\n                </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => { this.setOpenConfirm(false); }}\n                color=\"secondary\"\n                startIcon={<CloseIcon />}\n              >\n                Отмена\n                </Button>\n            </DialogActions>\n          </Dialog>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n","import {Document, Packer, Paragraph, TextRun} from 'docx';\r\nimport {saveAs}     from 'file-saver';\r\nimport storage      from '../storages/commonStorage';\r\n\r\nexport default function exportDocx (textRows) {\r\n    storage.alert.dispatch({ type: 'SHOW_ALERT', status: 'warn', message: 'Идёт сохранение документа...'})\r\n\r\n    const doc = new Document();\r\n    let rows = [];\r\n\r\n    try {\r\n        for (let text of textRows) {\r\n            rows.push(\r\n                // Size is 50% of MS Word pts\r\n                new Paragraph({ children: [new TextRun({text: `${text}`, size: \"24\", font: \"Arial\"})] })\r\n            );\r\n        }\r\n\r\n        doc.addSection({ children: rows })\r\n        \r\n        Packer.toBlob(doc).then(blob => {\r\n            saveAs(blob, \"SMISPlan document.docx\");\r\n            storage.alert.dispatch({ type: 'SHOW_ALERT', status: 'success', message: 'Документ успешно сохранён и загружен'})\r\n        });\r\n    }\r\n    catch (err) {\r\n        storage.alert.dispatch({ type: 'SHOW_ALERT', status: 'fail', message: 'Ошибка при создании и/или сохранении'})\r\n        console.log(`Ошибка при сохранении и/или создании документа: ${err}`)\r\n    }\r\n\r\n    return true;\r\n}","import React from 'react';\r\nimport { Dialog, DialogTitle, DialogActions, DialogContent } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport './PopupConfirm.css';\r\n\r\nexport default function PopupConfirm(props) {\r\n  const handleOk = () => {\r\n    props.action(props.id);\r\n    props.onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.isOpened}\r\n      onClose={props.onClose}\r\n      aria-labelledby=\"dialog-title\"\r\n      fullWidth={true}>\r\n      <DialogTitle id=\"dialog-title\">Вы подтверждаете {props.actionName} ?</DialogTitle>\r\n      <DialogContent>\r\n        {\r\n          props.actionText && \r\n          <div className=\"popup-confirm__content\">{props.actionText}</div>\r\n        }\r\n        <span className=\"popup-confirm__content\">Действие невозможно отменить!</span>\r\n      </DialogContent>\r\n      <DialogActions className=\"popup-confirm__actions\">\r\n        <Button variant=\"outlined\" onClick={handleOk} color=\"primary\" className=\"MuiButton-outlinedOk\"\r\n          startIcon={<CheckIcon />}>\r\n          Да\r\n        </Button>\r\n        <Button variant=\"outlined\" onClick={props.onClose} color=\"secondary\"\r\n          startIcon={<CloseIcon />}>\r\n          Отмена\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n","import React from 'react';\n\nimport { Dialog, DialogTitle, DialogActions, TextField, DialogContent } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n  KeyboardTimePicker,\n  KeyboardDateTimePicker\n} from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport 'moment/locale/ru';\n\nimport CustomSelect from '../../SharedComponents/CustomSelect';\nimport { metaData, dataTable } from '../../config/data';\nimport DateW from '../../utils/date';\nimport getDefaultValues from '../../utils/defaultData';\nimport './PopupAddLinkedInfo.css';\n\nconst dateTimeChange = (mode, value) => {\n  let date = undefined;\n  if (typeof value === 'string') {\n    date = value;\n    if (mode === 'time') date = value.split('T')[1];\n  }\n  else if (typeof value === 'object' && value && value._isAMomentObject) {\n    switch (mode) {\n      case 'date':\n        date = value.format(\"YYYY-MM-DD\");\n        break;\n      case 'time':\n        date = value.format(\"HH:mm:00\");\n        break;\n      case 'datetime':\n        date = value.format(\"YYYY-MM-DD HH:mm:00\");\n        break;\n      default:\n        date = undefined\n    }\n  }\n  return date;\n}\n\n// Standart dialog:\nexport default class PopupAddLinkedInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: this.props.isOpened,\n      emptyDataError: false,\n    };\n\n    // get list of not defined fields;\n    let type = this.props.type;\n    let fields = {}\n    let metaTable = metaData.tables[`${type}_meta`];\n    let realID = dataTable.map(task => { return task.id }).indexOf(this.props.id);\n    for (let prop in metaTable.dataTable) {\n      if (prop === 'id' || metaTable.dataTable[prop].defaultValue !== '') continue;\n      fields[prop] = {\n        type: metaTable.dataTable[prop].type,\n        value: metaTable.dataTable[prop].value\n      }\n\n      if (metaTable.dataTable[prop].initialValue) {\n        fields[prop].initialValue = getDefaultValues(realID, prop, metaTable.dataTable, 'initialValue');\n      }\n\n      if (['select', 'multi-select'].indexOf(metaTable.dataTable[prop].type) !== -1) {\n        fields[prop].list = metaTable.dataTable[prop].vocabulary ?\n          metaTable.dataTable[prop].vocabulary : prop;\n      }\n    }\n\n    this.state.fields = fields;\n    for (let field in fields) {\n      if (fields[field].initialValue) {\n        this.state[field] = fields[field].initialValue\n      }\n      else {\n        if (['datetime', 'date', 'time'].indexOf(fields[field].type) !== -1) {\n          this.state[field] = null;\n        }\n        else {\n          this.state[field] = undefined;\n        }\n      }\n    }\n  }\n\n  handleDateTimeChange = property => value => {\n    this.setState({ [property]: value })\n  }\n\n  handleOk = () => {\n    let editData = {};\n    for (let field in this.state.fields) {\n      editData[field] = '';\n    }\n\n    let emptyDataError = 0;\n    let type = this.props.type;\n    let metaTable = metaData.tables[`${type}_meta`];\n    for (let key in editData) {\n      editData[key] = this.state[key] ? this.state[key] : this[key] ? this[key].value : null;\n\n      if (['datetime', 'date', 'time'].indexOf(metaTable.dataTable[key].type) !== -1) {\n        editData[key] = dateTimeChange(metaTable.dataTable[key].type, this.state[key])\n      }\n\n      if (key !== 'week' && (!editData[key] || editData[key] === '')) emptyDataError++\n    }\n\n    if (metaTable.dataTable.week) {\n      editData.week = new DateW(editData.date).getYearWeekStr();\n    }\n\n    if (emptyDataError) {\n      this.setState({ emptyDataError: true });\n    }\n    else {\n      this.setState({ emptyDataError: false });\n      this.props.action(this.props.id, this.props.type, editData);\n      // this.setOpen(false);\n      this.props.onClose();\n    }\n  };\n\n  render() {\n    let editData = this.state.fields;\n    return (\n      <Dialog\n        open={this.props.isOpened}\n        onClose={() => { this.setState({ emptyDataError: false }); this.props.onClose(); }}\n        aria-labelledby=\"dialog-title\"\n        fullWidth={true}\n        style={{ overflow: 'visible' }}\n        classes={{ paper: 'dialog-linked-data' }}>\n        <DialogTitle id=\"dialog-title\">\n          <div className=\"popup-add-linked-info__title\">\n            <div>{this.props.title ? this.props.title : \"Добавление информации\"}</div>\n\n            <Button variant=\"outlined\" onClick={this.props.onClose} color=\"secondary\"\n              startIcon={<CloseIcon />}>\n              Закрыть\n            </Button>\n          </div>\n        </DialogTitle>\n        <DialogContent>\n          {this.state.emptyDataError &&\n            <div className=\"popup-add-linked-info__err-no-data\">Данные должны быть полностью заполнены</div>}\n          {Object.keys(editData)\n            .filter(property => property !== 'week')\n            .sort((a, b) => { return editData[a].value >= editData[b].value ? 1 : -1 })\n            .map(property => {\n              let propertyInfo = editData[property];\n              let listInfo = metaData[`${propertyInfo.list}List`];\n\n              return (\n                <div key={property} className=\"popup-add-linked-info__row\">\n                  <div className=\"popup-add-linked-info__value\">{propertyInfo.value}</div>\n                  {(propertyInfo.type === 'select' || propertyInfo.type === 'multi-select') &&\n                    <CustomSelect\n                      style={{ width: \"100%\", minHeight: '30px', marginTop: '5px' }}\n                      options={Object.keys(listInfo)\n                        .sort((a, b) => { return listInfo[a].value >= listInfo[b].value ? 1 : -1 })\n                        .map(propertyKey => { return { value: propertyKey, label: listInfo[propertyKey].value } })}\n                      defaultValue={editData[property].initialValue ?\n                        editData[property].initialValue.split(\",\").map(v => { return { value: v, label: listInfo[v].value } }) : null}\n                      ref={property} inputRef={el => this[property] = el}\n                      setValue={(value) => { return this.setState({ [property]: value }) }}\n                      label={'Выбрать...'}\n                      isMulti={propertyInfo.type === 'multi-select' ? true : false}\n                    />\n                  }\n                  {['fulltext', 'string', 'id'].indexOf(propertyInfo.type) !== -1 &&\n                    <TextField defaultValue={editData[property].initialValue}\n                      inputRef={el => this[property] = el}\n                      fullWidth={true} multiline={propertyInfo.type === 'fulltext' ? true : false} />}\n                  {propertyInfo.type === 'date' &&\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDatePicker\n                        format=\"YYYY-MM-DD\"\n                        margin=\"normal\"\n                        onChange={this.handleDateTimeChange(property, propertyInfo.type)}\n                        value={this.state[property]}\n                        inputRef={el => this[property] = el}\n                        fullWidth={true} />\n                    </MuiPickersUtilsProvider>}\n                  {propertyInfo.type === 'time' &&\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardTimePicker\n                        format=\"HH:mm\"\n                        margin=\"normal\"\n                        ampm={false}\n                        minutesStep={5}\n                        onChange={this.handleDateTimeChange(property)}\n                        value={this.state[property]}\n                        inputRef={el => this[property] = el}\n                        fullWidth={true} />\n                    </MuiPickersUtilsProvider>}\n                  {propertyInfo.type === 'datetime' &&\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDateTimePicker\n                        format=\"YYYY-MM-DD HH:mm\"\n                        ampm={false}\n                        minutesStep={5}\n                        margin=\"normal\"\n                        onChange={this.handleDateTimeChange(property, propertyInfo.type)}\n                        value={this.state[property]}\n                        inputRef={el => this[property] = el}\n                        fullWidth={true} />\n                    </MuiPickersUtilsProvider>}\n                </div>\n              )\n            }\n            )}\n        </DialogContent>\n        <DialogActions className=\"popup-add-linked-info__actions\">\n          <Button variant=\"outlined\" onClick={this.handleOk} color=\"primary\" className=\"MuiButton-outlinedOk\"\n            startIcon={<CheckIcon />}>\n            Принять\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n}\n","import React from 'react';\nimport { Menu, MenuItem } from '@material-ui/core';\nimport { ListItemIcon, Typography, Divider } from '@material-ui/core';\nimport ArrowLeft from '@material-ui/icons/ArrowLeft';\n\nimport CustomIcon from '../../SharedComponents/CustomIcon';\nimport PopupEdit from '../PopupEdit/PopupEdit';\nimport PopupConfirm from '../PopupConfirm/PopupConfirm';\nimport PopupAddLinkedInfo from '../PopupAddLinkedInfo/PopupAddLinkedInfo';\nimport './TblActionMenu.css';\n\nfunction TblActionMenu(props) {\n  const [opened, setOpened] = React.useState(false);\n  const [menuEl, setMenuEl] = React.useState(null);\n  const [menuElSub, setMenuElSub] = React.useState(null);\n  const [menuList, setMenuList] = React.useState([]);\n  const [isPopupConfirmOpened, setIsPopupConfirmOpened] = React.useState(false);\n  const [isPopupEditOpened, setIsPopupEditOpened] = React.useState(false);\n  const [isPopupLinkedOpened, setIsPopupLinkedOpened] = React.useState({});\n\n  const _menuElSub = React.useRef(null);\n\n  //need for correct work of sub menu\n  const showBasicElement = () => {\n    menuEl.parentElement.style.display = 'flex';\n  };\n  const hideBasicElement = () => {\n    menuEl.parentElement.style.display = '';\n    setOpened(false);\n  };\n\n  const handleClick = (event) => {\n    setIsPopupLinkedOpened({});\n    if (isPopupConfirmOpened) setIsPopupConfirmOpened(false);\n    if (isPopupEditOpened) setIsPopupEditOpened(false);\n\n    setMenuEl(event.currentTarget);\n    setOpened(true);\n    setMenuList(props.list);\n  };\n\n  const handleClickSub = (event) => {\n    showBasicElement();\n    setMenuElSub(event.currentTarget);\n    _menuElSub.current.style.marginLeft =\n      -1 * _menuElSub.current.children[1].offsetWidth + 5 + 'px';\n  };\n\n  const handleClickItem = (item, id) => {\n    setMenuEl(null);\n    switch (item.id) {\n      case 'tasks_edit':\n        handleOpenPopupEdit();\n        break;\n      case 'tasks_delete':\n        handleOpenPopupConfirm();\n        break;\n      case 'discussion':\n        handleOpenPopupLinked(item.id);\n        break;\n      case 'question':\n        handleOpenPopupLinked(item.id);\n        break;\n      default:\n        item.action(id);\n        break;\n    }\n  };\n\n  const action = (item, args) => {\n    setOpened(false);\n    item.action(...args);\n  }\n\n  const handleOpenPopupEdit = () => { setIsPopupEditOpened(true) };\n  const handleOpenPopupLinked = (type) => { setIsPopupLinkedOpened({ [type]: true }) };\n  const handleOpenPopupConfirm = () => { setIsPopupConfirmOpened(true) };\n  const handleClosePopups = (event) => {\n    setIsPopupLinkedOpened({});\n    setIsPopupConfirmOpened(false);\n    setIsPopupEditOpened(false);\n    setMenuEl(null);\n    setOpened(false);\n    if (event) event.stopPropagation();\n  }\n\n  return (\n    <>\n      <CustomIcon class=\"icn_moreH\" tip=\"Меню действий\" action={handleClick} />\n\n      {\n        opened &&\n        <Menu\n          keepMounted\n          anchorEl={menuEl}\n          open={Boolean(menuEl)}\n          onClose={() => {\n            hideBasicElement();\n            setMenuEl(null);\n          }}\n          className=\"tbl-action-menu\"\n        >\n          {menuList.map((item, index) => {\n            return (\n              <div key={`${index}`}>\n                {item.id === 'divider' && <Divider key={`menu-divider-${index}`} />}\n\n                {item.id !== 'divider' && !item.isListOfItems && (\n                  <MenuItem\n                    key={`menu-${item.id}-menuItem`}\n                    onClick={() => { handleClickItem(item, props.id) }\n                    }\n                  >\n                    <ListItemIcon>\n                      {item.id === 'tasks_edit' ? (\n                        <>\n                          <CustomIcon class={`icn_${item.id}`} tip=\"Редактировать\" />\n                          <PopupEdit\n                            isOpened={isPopupEditOpened}\n                            onClose={handleClosePopups}\n                            id={props.id}\n                            action={(...args) => { action(item, args) }}\n                            actionNew={item.actionNew}\n                            task={props.task}\n                          />\n                        </>\n                      ) :\n                        ['discussion', 'question'].indexOf(item.id) !== -1 ? (\n                          <>\n                            <CustomIcon class={`icn_${item.id}`} tip={item.value} type=\"material-ui\" />\n                            <PopupAddLinkedInfo\n                              isOpened={isPopupLinkedOpened[item.id] || false}\n                              onClose={handleClosePopups}\n                              id={props.id}\n                              action={item.action}\n                              type={item.type}\n                            />\n                          </>\n                        ) : item.id === 'tasks_delete' ? (\n                          <>\n                            <CustomIcon class={`icn_${item.id}`} tip={item.actionName} />\n                            <PopupConfirm\n                              isOpened={isPopupConfirmOpened}\n                              onClose={handleClosePopups}\n                              id={props.id}\n                              action={item.action}\n                              actionText={`Тема: ${props.task?.value}`}\n                            />\n                          </>\n                        ) : item.id ? (\n                          <CustomIcon\n                            class={`icn_${item.id}`}\n                            action={item.actionName}\n                            actionName={item.actionName}\n                            actionText={props.task?.value}\n                            tip={item.value} />\n                        ) : null}\n                    </ListItemIcon>\n                    <Typography variant=\"inherit\" noWrap>\n                      {item.value}\n                    </Typography>\n                  </MenuItem>\n                )}\n                {item.id !== 'divider' && item.isListOfItems && (\n                  <MenuItem key={`menu-${item.id}-menuItem`} onClick={handleClickSub}>\n                    <ListItemIcon>\n                      <ArrowLeft fontSize=\"default\" />\n                    </ListItemIcon>\n                    <Typography variant=\"inherit\" noWrap>\n                      {item.value}\n                    </Typography>\n                  </MenuItem>\n                )}\n                {item.id !== 'divider' && item.isListOfItems && (\n                  <Menu\n                    keepMounted\n                    anchorEl={menuElSub}\n                    ref={_menuElSub}\n                    key={`menu${item.id}-menuItem-sub`}\n                    open={Boolean(menuElSub)}\n                    onClose={() => { setMenuElSub(null); }}\n                  >\n                    {Object.keys(item.listItems).map((listItem) => (\n                      <MenuItem\n                        key={`menu${item.id}-menuItem-sub-${listItem}`}\n                        onClick={() => {\n                          hideBasicElement();\n                          setMenuEl(null);\n                          setMenuElSub(null);\n                          item.action(props.id, listItem);\n                        }}\n                      >\n                        {item.listItems[listItem].value}\n                      </MenuItem>\n                    ))}\n                  </Menu>\n                )}\n              </div>\n            );\n          })}\n        </Menu>\n      }\n    </>\n  );\n}\n\nexport default React.memo(TblActionMenu);\n"],"sourceRoot":""}